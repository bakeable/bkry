import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IExaminationTaskDto, IChangeLog, IProperties, ExaminationTaskRole, ExaminationTaskAction, AcceptanceRegionType, ExaminationTaskStatus,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const ExaminationTaskRoleValues: Record<string,ExaminationTaskRole> = Object.freeze({
  ADMIN: 'admin',
  CONTROLLER: 'controller',
  OBSERVER: 'observer',
})
export const ExaminationTaskActionValues: Record<string,ExaminationTaskAction> = Object.freeze({
  CREATED: 'created',
  UPDATED: 'updated',
  OBSERVED: 'observed',
  SOLVED: 'solved',
  APPROVED: 'approved',
  ARCHIVED: 'archived',
})
export const AcceptanceRegionTypeValues: Record<string,AcceptanceRegionType> = Object.freeze({
  RANGE: 'range',
  PERCENTAGE: 'percentage',
})
export const ExaminationTaskStatusValues: Record<string,ExaminationTaskStatus> = Object.freeze({
  CONCEPT: 'concept',
  PENDING: 'pending',
  FAILED: 'failed',
  SUCCESS: 'success',
  DONE: 'done',
  ARCHIVED: 'archived',
})

export class ExaminationTaskDto extends Dto implements IExaminationTaskDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/examination_task/{id}'
  _reference = '/ExaminationTask/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    approved = false
    
    
    assignedTo = ExaminationTaskRoleValues.observer
    
    
    changeLog: IChangeLog[] = []

    
    
    kind = "ExaminationTask"
    
    
    observations = {} satisfies Record<string, any>
    
    
    productId = ""
    
    
    productName = ""
    
    
    properties: IProperties[] = []

    
    
    sku = ""
    
    
    status = ExaminationTaskStatusValues.concept
    
    
    statusIndex = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): ExaminationTaskDto {
    // Create a new instance of the class
    const obj = new ExaminationTaskDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): ExaminationTaskDto[] {
    return data.map((item) => ExaminationTaskDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.approved !== undefined && data.approved !== null ) {
      this.approved = data.approved as boolean ?? this.approved
      
    }
    if (data.assignedTo !== undefined && data.assignedTo !== null ) {
        this.assignedTo = ExaminationTaskRoleValues[(data?.assignedTo as string)?.toUpperCase() ?? this.assignedTo.toUpperCase()]
    }
    if (data.changeLog !== undefined && data.changeLog !== null && Array.isArray(data.changeLog)) {
      if (data.changeLog) {
        this.changeLog = ChangeLog.FromJSONArray(data.changeLog as JSONData[])
      }
    }
    if (data.kind !== undefined && data.kind !== null ) {
      this.kind = data.kind as string ?? this.kind
      
    }
    if (data.observations !== undefined && data.observations !== null ) {
      this.observations = data.observations as Record<string, any> ?? this.observations
      
    }
    if (data.productId !== undefined && data.productId !== null ) {
      this.productId = data.productId as string ?? this.productId
      
    }
    if (data.productName !== undefined && data.productName !== null ) {
      this.productName = data.productName as string ?? this.productName
      
    }
    if (data.properties !== undefined && data.properties !== null && Array.isArray(data.properties)) {
      if (data.properties) {
        this.properties = Properties.FromJSONArray(data.properties as JSONData[])
      }
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
    if (data.status !== undefined && data.status !== null ) {
        this.status = ExaminationTaskStatusValues[(data?.status as string)?.toUpperCase() ?? this.status.toUpperCase()]
    }
    if (data.statusIndex !== undefined && data.statusIndex !== null ) {
      this.statusIndex = data.statusIndex as number ?? this.statusIndex
      
    }
  }

}

export class ChangeLog implements IChangeLog {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      action = ExaminationTaskActionValues.created
    
    
      status = ""
    
    
      timestamp = ""
    
    
      user = new User()
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): ChangeLog {
    // Create a new instance of the class
    const obj = new ChangeLog()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): ChangeLog[] {
    return data.map((item) => ChangeLog.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.action !== undefined && data.action !== null ) {
        this.action = ExaminationTaskActionValues[(data?.action as string)?.toUpperCase() ?? this.action.toUpperCase()]
    }
    if (data.status !== undefined && data.status !== null ) {
      this.status = data.status as string ?? this.status
      
    }
    if (data.timestamp !== undefined && data.timestamp !== null ) {
      this.timestamp = data.timestamp as string ?? this.timestamp
      
    }
    if (data.user !== undefined && data.user !== null ) {
      if (data.user) {
        this.user = User.FromJSON(data.user)
      }
    }
  }
}

export class User {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      email = ""
    
    
      id = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): User {
    // Create a new instance of the class
    const obj = new User()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): User[] {
    return data.map((item) => User.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.email !== undefined && data.email !== null ) {
      this.email = data.email as string ?? this.email
      
    }
    if (data.id !== undefined && data.id !== null ) {
      this.id = data.id as string ?? this.id
      
    }
  }
}

export class Properties implements IProperties {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      acceptanceRegion = new AcceptanceRegion()
    
    
      description = ""
    
    
      expectedValue = ""
    
    
      inputType = ""
    
    
      instructions = ""
    
    
      key = ""
    
    
      lowerBound = 0
    
    
      name = ""
    
    
      productSpecific = false
    
    
      required = false
    
    
      type = ""
    
    
      unitType = ""
    
    
      upperBound = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Properties {
    // Create a new instance of the class
    const obj = new Properties()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Properties[] {
    return data.map((item) => Properties.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.acceptanceRegion !== undefined && data.acceptanceRegion !== null ) {
      if (data.acceptanceRegion) {
        this.acceptanceRegion = AcceptanceRegion.FromJSON(data.acceptanceRegion)
      }
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.expectedValue !== undefined && data.expectedValue !== null ) {
      this.expectedValue = data.expectedValue as string ?? this.expectedValue
      
    }
    if (data.inputType !== undefined && data.inputType !== null ) {
      this.inputType = data.inputType as string ?? this.inputType
      
    }
    if (data.instructions !== undefined && data.instructions !== null ) {
      this.instructions = data.instructions as string ?? this.instructions
      
    }
    if (data.key !== undefined && data.key !== null ) {
      this.key = data.key as string ?? this.key
      
    }
    if (data.lowerBound !== undefined && data.lowerBound !== null ) {
      this.lowerBound = data.lowerBound as number ?? this.lowerBound
      
    }
    if (data.name !== undefined && data.name !== null ) {
      this.name = data.name as string ?? this.name
      
    }
    if (data.productSpecific !== undefined && data.productSpecific !== null ) {
      this.productSpecific = data.productSpecific as boolean ?? this.productSpecific
      
    }
    if (data.required !== undefined && data.required !== null ) {
      this.required = data.required as boolean ?? this.required
      
    }
    if (data.type !== undefined && data.type !== null ) {
      this.type = data.type as string ?? this.type
      
    }
    if (data.unitType !== undefined && data.unitType !== null ) {
      this.unitType = data.unitType as string ?? this.unitType
      
    }
    if (data.upperBound !== undefined && data.upperBound !== null ) {
      this.upperBound = data.upperBound as number ?? this.upperBound
      
    }
  }
}

export class AcceptanceRegion {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      max = 0
    
    
      min = 0
    
    
      symmetric = false
    
    
      type = AcceptanceRegionTypeValues.percentage
    
    
      value = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): AcceptanceRegion {
    // Create a new instance of the class
    const obj = new AcceptanceRegion()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): AcceptanceRegion[] {
    return data.map((item) => AcceptanceRegion.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.max !== undefined && data.max !== null ) {
      this.max = data.max as number ?? this.max
      
    }
    if (data.min !== undefined && data.min !== null ) {
      this.min = data.min as number ?? this.min
      
    }
    if (data.symmetric !== undefined && data.symmetric !== null ) {
      this.symmetric = data.symmetric as boolean ?? this.symmetric
      
    }
    if (data.type !== undefined && data.type !== null ) {
        this.type = AcceptanceRegionTypeValues[(data?.type as string)?.toUpperCase()  ?? this.type.toUpperCase()]
    }
    if (data.value !== undefined && data.value !== null ) {
      this.value = data.value as number ?? this.value
      
    }
  }
}
