import { type DeliveryEntry } from './entity'
import { type Store } from 'pinia'


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the deliveryEntry store.
 */
export interface DeliveryEntryStoreState {
  /**
   * The currently active deliveryEntry ID
   */
  activeID: string | null

  /**
   * A cache of deliveryEntrys.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of deliveryEntrys.
   */
  list: DeliveryEntry[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an DeliveryEntryStore that extends the Store interface.
 */
export interface DeliveryEntryStore extends DeliveryEntryStoreState, Store {
  /**
   * Fire a form update event for the DeliveryEntry.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all DeliveryEntry.
   */
  emitStoreUpdateEvent: () => void

  /**
   * The currently active deliveryEntry
   */
  active: DeliveryEntry

  /**
   * Adds an deliveryEntry to the local DeliveryEntryStore.
   * @param deliveryEntry The deliveryEntry to be added.
   */
  add: (deliveryEntry: DeliveryEntry) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Deletes an deliveryEntry from the DeliveryEntryStore from the external database.
   * @param deliveryEntry The deliveryEntry to be deleted.
   * @returns {Promise<void>} A promise that resolves when the deliveryEntry is deleted.
   */
  delete: (deliveryEntry: DeliveryEntry) => Promise<void>

  /**
   * Deletes an deliveryEntry by ID from the DeliveryEntryStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the deliveryEntry is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Get a DeliveryEntry from the local DeliveryEntryStore.
   * @returns { DeliveryEntry | null } The deliveryEntry.
   */
  get: (id: string) => DeliveryEntry | null

  /**
   * Reinserts an deliveryEntry to the DeliveryEntryStore list.
   * @param deliveryEntry The deliveryEntry to be reinserted.
   * @returns {void}
   */
  reinsert: (deliveryEntry: DeliveryEntry) => void

  /**
   * Removes an deliveryEntry from the local DeliveryEntryStore.
   * @param deliveryEntry The deliveryEntry to be removed.
   * @returns {void}
   */
  remove: (deliveryEntry: DeliveryEntry) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single DeliveryEntry from either the local DeliveryEntryStore or external source, if forced or required.
    * @param id The ID of the DeliveryEntry to retrieve.
    * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves when the deliveryEntry is set as active.
   */
  retrieve: (id: string, force?: boolean) => Promise<DeliveryEntry>

  /**
   * Retrieves all deliveryEntrys from the DeliveryEntryStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves with an array of deliveryEntrys.
   */
  retrieveAll: (force?: boolean) => Promise<{
    active: string | null
    items: DeliveryEntry[]
  }>

  /**
    * Retrieves deliveryEntrys paginated from the external source
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of deliveryEntrys.
    */
  retrievePaginated: (pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: DeliveryEntry[]
  }>

  /**
    * Queries deliveryEntrys from the external source
    * @param queries The queries to be used for filtering.
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of deliveryEntrys.
    */
  query: (queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: DeliveryEntry[]
  }>

  /**
   * Update an deliveryEntry from the DeliveryEntryStore in the external database.
   * @param deliveryEntry The deliveryEntry to be updated.
   * @param connect Indicates whether the deliveryEntry should be connected to the user on update.
   * @returns {Promise<string>} A promise that resolves to the ID as a string when the deliveryEntry is updated.
   */
  update: (deliveryEntry: DeliveryEntry) => Promise<string>

  /**
    * Searches for deliveryEntrys in the external source.
    * @param query The query to be used for searching.
    * @returns {Promise<void>} A promise that resolves with an array of deliveryEntrys.
    */
  search: (query: string, pagination: Pagination, force?: boolean) => Promise<DeliveryEntry[]>
}
