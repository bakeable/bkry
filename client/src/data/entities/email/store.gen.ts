import { defineStore } from 'pinia'
import { Email } from './entity'
import { EmailList } from './list.gen'
import type { EmailStore, EmailStoreState } from './store.gen.d'
import { analytics, auth } from '@/firebase'
import { type JSONData } from '../../base_classes/dto.d'
import { Pagination } from "../../base_classes/pagination";
import { Query } from "../../base_classes/query";
import { paginationAndQueriesToCacheKey } from "../../base_classes/dto_list";


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

const emailList = new EmailList()
export const useEmailStore = defineStore('emailStore', {
  state: (): EmailStoreState => ({
    activeID: null,
    cache: {},
    list: [] as Email[],
    retrievalTimestamp: 0,
    updateKey: 0,
    storeUpdateTimeout: null,
  }),
  actions: {
    initializeStore(): void {
      this.convertList()
    },
    emitFormUpdateEvent(id: string): void {
      window.dispatchEvent(new CustomEvent("form-update-Email", { detail: { id } }));
    },
    emitStoreUpdateEvent(): void {
      // Clear existing timeout
      if (this.storeUpdateTimeout !== null) {
        clearTimeout(this.storeUpdateTimeout)
      }

      // Set new timeout
      this.storeUpdateTimeout = setTimeout(() => {
        window.dispatchEvent(new CustomEvent("store.update.Email"));
        this.storeUpdateTimeout = null
      }, 1500)
    },
    async activate(email: Email): Promise<void> {
      // Set active
      await email
        .activate(auth.firebaseUser?.uid)
        .then(() => {
          this.activeID = email.id
        })
        .catch((error) => {
          console.error(error)
          this.activeID = null
        })
    },
    add(email: Email): void {
      const id = email.id
      if (typeof id === 'string' && !this.contains(id)) {
        this.list.push(email)

        // Set active
        if (this.active === null) {
          this.activeID = email.id
        }
      } else {
        this.reinsert(email)
      }
      this.updateKey += 1;
    },
    convertList(): void {
      this.list = (this.list as Email[]).map((x: any) => {
        const email = new Email({})
        email.set(x as JSONData)
        return email
      })
    },
    async delete(email: Email): Promise<void> {
      await email.delete().then(() => {
        this.remove(email)
      }).finally(() => {
        this.emitStoreUpdateEvent()
      });
    },
    async deleteById(id: string): Promise<void> {
      const email = (this.list as Email[]).find((x: Email) => x.id === id)
      if (email !== undefined) {
        await this.delete(email)
      } else {
        throw new Error('Could not find Email with id: ' + id)
      }
    },
    contains(id: string): boolean {
      return (this.list as Email[]).some((x: Email) => x.id === id)
    },
    get(id: string): Email | null {
      return (this.list as Email[]).find((x: Email) => x.id === id) || null
    },
    reinsert(email: Email): void {
      const index = (this.list as Email[]).findIndex((x: Email) => x.id === email.id)
      if (index !== -1) {
        this.list = [
          ...this.list.slice(0, index),
          email,
          ...this.list.slice(index + 1),
        ]
      } else {
        this.add(email)
      }
      this.updateKey += 1;
    },
    remove({ id }: Email): void {
      const index = (this.list as Email[]).findIndex((x: Email) => x.id === id)
      if (index !== -1) {
        this.list = [
          ...this.list.slice(0, index),
          ...this.list.slice(index + 1),
        ]
      }
      this.updateKey += 1;
    },
    async retrieve(id: string, force = false): Promise<Email> {
      // Check if a refresh is required
      if (!force && !this.refreshRequired) {
        const email = this.get(id)
        if (email !== null) {
          return email
        }
      }

      // Retrieve email
      const email = new Email({})

      // Get email
      await email.get([id]).then(async (entity) => {
        this.reinsert(entity)

        // Activate email
        await this.activate(entity)
      })

      return email
    },
    async retrieveAll(force = false): Promise<{
      active: string | null
      items: Email[]
    }> {
      // Check if a refresh is required
      if (!force && !this.refreshRequired) {
        return {
          active: this.activeID,
          items: this.list as Email[],
        }
      }

      // Clear list
      while (this.list.length > 0) {
        this.list.pop()
      }

      // Retrieve list
      await emailList.getAll().then(async (list) => {
        list.forEach((email) => {
          this.reinsert(email)
        })

        // Activate email
        if (list.length > 0) {
          if (emailList.active !== null) {
            this.activeID = emailList.active
          } else {
            await this.activate(list[0])
          }
        }
      })

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now()

      // Set user property
      if (this.activeID !== null) {
        analytics.setUserProperty('email_id', this.activeID)
      }

      return {
        active: this.activeID,
        items: this.list as Email[],
      }
    },
    async retrievePaginated(pagination: Pagination, force = false): Promise<{
      pagination: Pagination;
      items: Email[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = pagination.toCacheKey();

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          pagination: cached.pagination.deepCopy(),
          items: cached.ids.map((id: string) => this.get(id) as Email),
        };
      }

      // Retrieve list
      const items = await emailList.getPaginated(
        [],
        pagination
      ).then(async ({items, pagination }) => {
        items.forEach((email) => {
          this.reinsert(email);
        });

        // Set new pagination
        newPagination = pagination.deepCopy();

        return items;
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: Email) => x.id),
        pagination: newPagination,
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        pagination: newPagination,
        items,
      };
    },
    async query(queries: Query[], pagination: Pagination, force = false): Promise<{
      pagination: Pagination;
      items: Email[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = paginationAndQueriesToCacheKey(pagination, queries);

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          pagination: cached.pagination.deepCopy(),
          items: cached.ids.map((id: string) => this.get(id) as Email),
        };
      }

      // Retrieve list
      const items = await emailList.query(
        queries,
        pagination,
      ).then(async ({ items, pagination }) => {
        items.forEach((email) => {
          this.reinsert(email);
        });

        // Set new pagination
        newPagination = pagination.deepCopy();;

        return items
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: Email) => x.id),
        pagination: newPagination.deepCopy(),
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        pagination: newPagination,
        items: items,
      };
    },
    async search(
      
      query: string,
      pagination: Pagination,
      force = false,
    ): Promise<{
      pagination: Pagination;
      items: Email[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = query.replaceAll(" ", "_") + '-' + pagination.toCacheKey();

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          items: cached.ids.map(
            (id: string) => this.get(id) as Email,
          ),
          pagination: cached.pagination.deepCopy(),
        };
      }

      // Retrieve list
      const items = await emailList
        .search(query, pagination)
        .then(async ({ items, pagination }) => {
          items.forEach((email) => {
            this.reinsert(email);
          });

          // Set new pagination
          newPagination = pagination.deepCopy();

          return items;
        });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: Email) => x.id),
        pagination: newPagination.deepCopy(),
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        items: items,
        pagination: newPagination,
      };
    },
    async update(email: Email): Promise<string> {
      // Update email
      await email.update()

      // Reinsert email
      this.reinsert(email)

      // Activate email
      if (this.active === null) {
        await this.activate(email)
      }
      
      this.emitStoreUpdateEvent()

      return email.id
    },
  },
  getters: {
    active(): Email | null {
      if (this.activeID === null) {
        return null
      }

      const email = (this.list as Email[]).find((x: Email) => x.id === this.activeID)
      if (email === undefined) {
        return null
      }

      return email
    },
    refreshRequired(): boolean {
      return (
        this.retrievalTimestamp === 0 ||
        this.retrievalTimestamp < Date.now() - 30 * 60000 ||
        this.list.length === 0
      )
    },
  },
})

// Export a function to create a new instance of the store
export function createEmailStore(): EmailStore {
  const store = useEmailStore()
  // Run the initializeStore action when the store is created
  store.initializeStore()
  return store as unknown as EmailStore // TODO: Fix this
}
