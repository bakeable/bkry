import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IPriceConfigurationDto,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class PriceConfigurationDto extends Dto implements IPriceConfigurationDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/price_configuration/{id}'
  _reference = '/PriceConfiguration/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    additional_costs = 0
    
    
    attributes = {} satisfies Record<string, string>
    
    
    currency = "EUR"
    
    
    final_price = 0
    
    
    fixed_costs = 0
    
    
    _kind = "PriceConfiguration"
    
    
    margin_amount = 0
    
    
    margin_percentage = 0
    
    
    product_id = ""
    
    
    sku = ""
    
    
    total_costs = 0
    
    
    unit_costs = 0
    
    
    unit_margin = 0
    
    
    units = 0
    
    
    variable_costs = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): PriceConfigurationDto {
    // Create a new instance of the class
    const obj = new PriceConfigurationDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): PriceConfigurationDto[] {
    return data.map((item) => PriceConfigurationDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.additional_costs !== undefined && data.additional_costs !== null ) {
      this.additional_costs = data.additional_costs as number ?? this.additional_costs
      
    }
    if (data.attributes !== undefined && data.attributes !== null ) {
      this.attributes = data.attributes as Record<string, string> ?? this.attributes
      
    }
    if (data.currency !== undefined && data.currency !== null ) {
      this.currency = data.currency as string ?? this.currency
      
    }
    if (data.final_price !== undefined && data.final_price !== null ) {
      this.final_price = data.final_price as number ?? this.final_price
      
    }
    if (data.fixed_costs !== undefined && data.fixed_costs !== null ) {
      this.fixed_costs = data.fixed_costs as number ?? this.fixed_costs
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.margin_amount !== undefined && data.margin_amount !== null ) {
      this.margin_amount = data.margin_amount as number ?? this.margin_amount
      
    }
    if (data.margin_percentage !== undefined && data.margin_percentage !== null ) {
      this.margin_percentage = data.margin_percentage as number ?? this.margin_percentage
      
    }
    if (data.product_id !== undefined && data.product_id !== null ) {
      this.product_id = data.product_id as string ?? this.product_id
      
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
    if (data.total_costs !== undefined && data.total_costs !== null ) {
      this.total_costs = data.total_costs as number ?? this.total_costs
      
    }
    if (data.unit_costs !== undefined && data.unit_costs !== null ) {
      this.unit_costs = data.unit_costs as number ?? this.unit_costs
      
    }
    if (data.unit_margin !== undefined && data.unit_margin !== null ) {
      this.unit_margin = data.unit_margin as number ?? this.unit_margin
      
    }
    if (data.units !== undefined && data.units !== null ) {
      this.units = data.units as number ?? this.units
      
    }
    if (data.variable_costs !== undefined && data.variable_costs !== null ) {
      this.variable_costs = data.variable_costs as number ?? this.variable_costs
      
    }
  }

}
