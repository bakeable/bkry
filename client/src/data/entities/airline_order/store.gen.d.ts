import { type AirlineOrder } from './entity'
import { type Store } from 'pinia'


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the airlineOrder store.
 */
export interface AirlineOrderStoreState {
  /**
   * The currently active airlineOrder ID
   */
  activeID: string | null

  /**
   * A cache of airlineOrders.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of airlineOrders.
   */
  list: AirlineOrder[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an AirlineOrderStore that extends the Store interface.
 */
export interface AirlineOrderStore extends AirlineOrderStoreState, Store {
  /**
   * Fire a form update event for the AirlineOrder.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all AirlineOrder.
   */
  emitStoreUpdateEvent: () => void

  /**
   * The currently active airlineOrder
   */
  active: AirlineOrder

  /**
   * Adds an airlineOrder to the local AirlineOrderStore.
   * @param airlineOrder The airlineOrder to be added.
   */
  add: (airlineOrder: AirlineOrder) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Deletes an airlineOrder from the AirlineOrderStore from the external database.
   * @param airlineOrder The airlineOrder to be deleted.
   * @returns {Promise<void>} A promise that resolves when the airlineOrder is deleted.
   */
  delete: (airlineOrder: AirlineOrder) => Promise<void>

  /**
   * Deletes an airlineOrder by ID from the AirlineOrderStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the airlineOrder is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Get a AirlineOrder from the local AirlineOrderStore.
   * @returns { AirlineOrder | null } The airlineOrder.
   */
  get: (id: string) => AirlineOrder | null

  /**
   * Reinserts an airlineOrder to the AirlineOrderStore list.
   * @param airlineOrder The airlineOrder to be reinserted.
   * @returns {void}
   */
  reinsert: (airlineOrder: AirlineOrder) => void

  /**
   * Removes an airlineOrder from the local AirlineOrderStore.
   * @param airlineOrder The airlineOrder to be removed.
   * @returns {void}
   */
  remove: (airlineOrder: AirlineOrder) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single AirlineOrder from either the local AirlineOrderStore or external source, if forced or required.
    * @param id The ID of the AirlineOrder to retrieve.
    * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves when the airlineOrder is set as active.
   */
  retrieve: (id: string, force?: boolean) => Promise<AirlineOrder>

  /**
   * Retrieves all airlineOrders from the AirlineOrderStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves with an array of airlineOrders.
   */
  retrieveAll: (force?: boolean) => Promise<{
    active: string | null
    items: AirlineOrder[]
  }>

  /**
    * Retrieves airlineOrders paginated from the external source
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of airlineOrders.
    */
  retrievePaginated: (pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: AirlineOrder[]
  }>

  /**
    * Queries airlineOrders from the external source
    * @param queries The queries to be used for filtering.
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of airlineOrders.
    */
  query: (queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: AirlineOrder[]
  }>

  /**
   * Update an airlineOrder from the AirlineOrderStore in the external database.
   * @param airlineOrder The airlineOrder to be updated.
   * @param connect Indicates whether the airlineOrder should be connected to the user on update.
   * @returns {Promise<string>} A promise that resolves to the ID as a string when the airlineOrder is updated.
   */
  update: (airlineOrder: AirlineOrder) => Promise<string>

  /**
    * Searches for airlineOrders in the external source.
    * @param query The query to be used for searching.
    * @returns {Promise<void>} A promise that resolves with an array of airlineOrders.
    */
  search: (query: string, pagination: Pagination, force?: boolean) => Promise<AirlineOrder[]>
}
