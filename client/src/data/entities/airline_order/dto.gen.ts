import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IAirlineOrderDto, IMargin,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class AirlineOrderDto extends Dto implements IAirlineOrderDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/airline_order/{id}'
  _reference = '/AirlineOrder/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    afasOrderNumber = ""
    
    
    colors = 0
    
    
    customerId = ""
    
    
    customerName = ""
    
    
    date = "new Date()"
    
    
    deliveryAddress = ""
    
    
    description = ""
    
    
    dividers = 0
    
    
    guid = ""
    
    
    supplierId = ""
    
    
    isGrouped = false
    
    
    _kind = "AirlineOrder"
    
    
    margin: IMargin = {
      amount: 0,
      percentage: 0,
      percentageType: "profit-margin",
      staggered: false,
      type: "percentage",
      values: [] as any[],
    }

    
    
    number = ""
    
    
    orderNumber = ""
    
    
    originalTotalCosts = 0
    
    
    originalUnitCosts = 0
    
    
    serialNumber = 0
    
    
    sku = ""
    
    
    status = ""
    
    
    totalCosts = 0.0
    
    
    unitCosts = 0.0
    
    
    unitType = ""
    
    
    units = 0
    
    
    warehouse = ""
    
    
    width = 0
    
    
    widthUnitType = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): AirlineOrderDto {
    // Create a new instance of the class
    const obj = new AirlineOrderDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): AirlineOrderDto[] {
    return data.map((item) => AirlineOrderDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.afasOrderNumber !== undefined && data.afasOrderNumber !== null ) {
      this.afasOrderNumber = data.afasOrderNumber as string ?? this.afasOrderNumber
      
    }
    if (data.colors !== undefined && data.colors !== null ) {
      this.colors = data.colors as number ?? this.colors
      
    }
    if (data.customerId !== undefined && data.customerId !== null ) {
      this.customerId = data.customerId as string ?? this.customerId
      
    }
    if (data.customerName !== undefined && data.customerName !== null ) {
      this.customerName = data.customerName as string ?? this.customerName
      
    }
    if (data.date !== undefined && data.date !== null ) {
      this.date = data.date as string ?? this.date
      
    }
    if (data.deliveryAddress !== undefined && data.deliveryAddress !== null ) {
      this.deliveryAddress = data.deliveryAddress as string ?? this.deliveryAddress
      
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.dividers !== undefined && data.dividers !== null ) {
      this.dividers = data.dividers as number ?? this.dividers
      
    }
    if (data.guid !== undefined && data.guid !== null ) {
      this.guid = data.guid as string ?? this.guid
      
    }
    if (data.supplierId !== undefined && data.supplierId !== null ) {
      this.supplierId = data.supplierId as string ?? this.supplierId
      
    }
    if (data.isGrouped !== undefined && data.isGrouped !== null ) {
      this.isGrouped = data.isGrouped as boolean ?? this.isGrouped
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.margin !== undefined && data.margin !== null ) {
      if (data.margin) {
        this.margin = Margin.FromJSON(data.margin)
      }
    }
    if (data.number !== undefined && data.number !== null ) {
      this.number = data.number as string ?? this.number
      
    }
    if (data.orderNumber !== undefined && data.orderNumber !== null ) {
      this.orderNumber = data.orderNumber as string ?? this.orderNumber
      
    }
    if (data.originalTotalCosts !== undefined && data.originalTotalCosts !== null ) {
      this.originalTotalCosts = data.originalTotalCosts as number ?? this.originalTotalCosts
      
    }
    if (data.originalUnitCosts !== undefined && data.originalUnitCosts !== null ) {
      this.originalUnitCosts = data.originalUnitCosts as number ?? this.originalUnitCosts
      
    }
    if (data.serialNumber !== undefined && data.serialNumber !== null ) {
      this.serialNumber = data.serialNumber as number ?? this.serialNumber
      
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
    if (data.status !== undefined && data.status !== null ) {
      this.status = data.status as string ?? this.status
      
    }
    if (data.totalCosts !== undefined && data.totalCosts !== null ) {
      this.totalCosts = data.totalCosts as number ?? this.totalCosts
      
    }
    if (data.unitCosts !== undefined && data.unitCosts !== null ) {
      this.unitCosts = data.unitCosts as number ?? this.unitCosts
      
    }
    if (data.unitType !== undefined && data.unitType !== null ) {
      this.unitType = data.unitType as string ?? this.unitType
      
    }
    if (data.units !== undefined && data.units !== null ) {
      this.units = data.units as number ?? this.units
      
    }
    if (data.warehouse !== undefined && data.warehouse !== null ) {
      this.warehouse = data.warehouse as string ?? this.warehouse
      
    }
    if (data.width !== undefined && data.width !== null ) {
      this.width = data.width as number ?? this.width
      
    }
    if (data.widthUnitType !== undefined && data.widthUnitType !== null ) {
      this.widthUnitType = data.widthUnitType as number ?? this.widthUnitType
      
    }
  }

}

export class Margin implements IMargin {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      amount = 0
    
    
      percentage = 0
    
    
      percentageType = "profit-margin"
    
    
      staggered = false
    
    
      type = "percentage"
    
    
      values = [] as any[]
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Margin {
    // Create a new instance of the class
    const obj = new Margin()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Margin[] {
    return data.map((item) => Margin.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.amount !== undefined && data.amount !== null ) {
      this.amount = data.amount as number ?? this.amount
      
    }
    if (data.percentage !== undefined && data.percentage !== null ) {
      this.percentage = data.percentage as number ?? this.percentage
      
    }
    if (data.percentageType !== undefined && data.percentageType !== null ) {
      this.percentageType = data.percentageType as string ?? this.percentageType
      
    }
    if (data.staggered !== undefined && data.staggered !== null ) {
      this.staggered = data.staggered as boolean ?? this.staggered
      
    }
    if (data.type !== undefined && data.type !== null ) {
      this.type = data.type as string ?? this.type
      
    }
    if (data.values !== undefined && data.values !== null ) {
      this.values = data.values as any[] ?? this.values
      
    }
  }
}
