import request from "../../api/request";
import { type {{.TypeName}} } from './interface.gen'
import { type IPagination, Pagination } from "../../general/pagination";
import { Query } from "../../general/query";

type {{.TypeName}}PathVariables = { 
  [key: string]: string | undefined,
  {{- range .ParentsSnakeCase}}
  {{.}}_id: string,
  {{- end}}
  id?: string,
}

export class {{.TypeName}}Transporter {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  static config = Object.freeze({
    endpoint: "{{.Endpoint}}",
  })

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////

  /// ///////////////////////////////////////
  /// ////////////// METHODS ////////////////
  /// ///////////////////////////////////////

  private static Endpoint(params?: {{.TypeName}}PathVariables): string {
    let path = this.config.endpoint.toString()
    if (!params) return path
    for (const key in Object.keys(params)) {
      if (!params[key]) continue
      path = path.replace(`{${key}}`, params[key])
    }
    if ("id" in params && !!params.id) {
      path = path + "/" + params.id
    }
    return path
  }

  /// ///////////////////////////////////////
  /// /////////// STATIC METHODS ////////////
  /// ///////////////////////////////////////

  public static async Get({
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
    id,
  }: {{.TypeName}}PathVariables): Promise<{{.TypeName}}> {
    // Retrieve
    const { item }: { item: {{.TypeName}} } = await request({
      url: this.Endpoint({ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
        id,
      }),
      method: "get",
    });

    // Parse
    return item
  }

  public static async Create({
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
  }: {{.TypeName}}PathVariables, 
    data: {{.TypeName}}
  ): Promise<{{.TypeName}}> {
    // Create
    const { item }: { item: {{.TypeName}} } = await request({
      url: this.Endpoint({{- if hasItems .ParentsSnakeCase}}{ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
      }{{- end}}),
      method: "post",
      data,
    });

    // Parse
    return item
  }

  public static async Update(
    data: {{.TypeName}}
  ): Promise<{{.TypeName}}> {
    // Update
    const { item }: { item: {{.TypeName}} } = await request({
      url: this.Endpoint(data as unknown as {{.TypeName}}PathVariables),
      method: "put",
      data,
    });

    // Parse
    return item
  }

  public static async Delete({
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
    id,
  }: {{.TypeName}}PathVariables | {{.TypeName}}): Promise<void> {
    // Delete
    await request({
      url: this.Endpoint({ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
        id,
      }),
      method: "delete",
    });
  }

  public static async GetAll({{- if hasItems .ParentsSnakeCase}}{
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
  }: {{.TypeName}}PathVariables{{- end}}): Promise<{{.TypeName}}[]> {
    // Retrieve
    const { items }: { items: {{.TypeName}}[] } = await request({
      url: this.Endpoint({{- if hasItems .ParentsSnakeCase}}{ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
      }{{- end}}),
      method: "get",
    });

    return items
  }

  public static async Query({{- if hasItems .ParentsSnakeCase}}{
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
  }: {{.TypeName}}PathVariables, {{- end}}pagination: Pagination, queries: Query[]): Promise<{ items: {{.TypeName}}[], pagination: Pagination }> {
    // Retrieve
    const { items, page_info }: { items: {{.TypeName}}[], page_info: IPagination } = await request({
      url: this.Endpoint({ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
      }),
      method: "get",
      params: {
        pagination: pagination.toRouteQuery(),
        queries: Query.ToQueryParams(queries),
      },
    });

    return { items, pagination: Pagination.FromObject(page_info) }
  }

  public static async GetPaginated({{- if hasItems .ParentsSnakeCase}}{
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
  }: {{.TypeName}}PathVariables, {{- end}}pagination: Pagination): Promise<{ items: {{.TypeName}}[], pagination: Pagination }> {
    // Retrieve
    const { items, page_info }: { items: {{.TypeName}}[], page_info: IPagination } = await request({
      url: this.Endpoint({ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
      }),
      method: "get",
      params: {
        pagination: pagination.toRouteQuery(),
      },
    });

    return { items, pagination: Pagination.FromObject(page_info) }
  }

  public static async Search({{- if hasItems .ParentsSnakeCase}}{
    {{- range .ParentsSnakeCase}}
    {{.}}_id,
    {{- end}}
  }: {{.TypeName}}PathVariables, {{- end}}
  pagination: Pagination, 
  search: string
  ): Promise<{ items: {{.TypeName}}[], pagination: Pagination }> {
    // Retrieve
    const { items, page_info }: { items: {{.TypeName}}[], page_info: IPagination }  = await request({
      url: this.Endpoint({ 
        {{- range .ParentsSnakeCase}}
        {{.}}_id,
        {{- end}}
      }),
      method: "get",
      params: {
        pagination: pagination.toRouteQuery(),
        search,
      },
    });

    return { items, pagination: Pagination.FromObject(page_info) }
  }
}

