package repo

import (
	"github.com/bakeable/bkry/internal/server/database"
{{- range .}}
	"github.com/bakeable/bkry/internal/server/models/entities/{{.PackagePath}}"
{{- end}}
	
)

//// THIS FILE IS AUTO-GENERATED. DO NOT EDIT.

type IRepository interface {
{{- range .}}
	// Get{{.TypeName}} retrieves a single {{.TypeName}} entity by its ID and {{.VarName}}.
	Get{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}{{.VarName}} string) ({{.EntityName}}.{{.TypeName}}, error)
	// Get{{.TypeName}}OrNew retrieves a single {{.TypeName}} entity by its ID and {{.VarName}}.
	Get{{.TypeName}}OrNew({{range .ParentsCamelCase}}{{.}}ID string, {{end}}{{.VarName}} string) ({{.EntityName}}.{{.TypeName}}, error)
	// Get{{.TypeName}} retrieves a single {{.TypeName}} entity by its document path.
	Get{{.TypeName}}ByPath(path string) ({{.EntityName}}.{{.TypeName}}, error)
	// Find{{.TypeName}} retrieves a {{.TypeName}} entity according to given queries.
	Find{{.TypeName}}({{.ParentParams}}{{if gt (len .ParentParams) 0}}, {{end}}queries []database.Query) ({{.EntityName}}.{{.TypeName}}, error)
	// GetAll{{.TypeNamePlural}} retrieves all {{.TypeName}} entities.
	GetAll{{.TypeNamePlural}}({{.ParentParams}}) ([]{{.EntityName}}.{{.TypeName}}, error)
	// GetAll{{.TypeNamePlural}}Paginated retrieves all {{.TypeName}} entities in a paginated manner.
	GetAll{{.TypeNamePlural}}Paginated({{if gt (len .ParentParams) 0}}{{.ParentParams}}, {{end}}pagination database.Pagination) ([]{{.EntityName}}.{{.TypeName}}, database.Pagination, error)
	// Query{{.TypeNamePlural}} retrieves all {{.TypeName}} entities according to given queries.
	Query{{.TypeNamePlural}}({{.ParentParams}}{{if gt (len .ParentParams) 0}}, {{end}}queries []database.Query, pagination database.Pagination) ([]{{.EntityName}}.{{.TypeName}}, database.Pagination, error)
	// Query{{.TypeNamePlural}}Group retrieves all {{.TypeName}} entities according to given queries.
	Query{{.TypeNamePlural}}Group(queries []database.Query) ([]{{.EntityName}}.{{.TypeName}}, error)
	// Create{{.TypeName}} creates a new {{.TypeName}} entity.
	Create{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}entity {{.EntityName}}.{{.TypeName}}, editorID *string) (string, error)
	// Update{{.TypeName}} updates an existing {{.TypeName}} entity.
	Update{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}entity {{.EntityName}}.{{.TypeName}}, editorID *string) (string, error)
	// Save{{.TypeName}} saves a {{.TypeName}} entity. If the entity has an ID, it updates the existing entity; otherwise, it creates a new entity.
	Save{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}entity {{.EntityName}}.{{.TypeName}}, editorID *string) (string, error)
	// Delete{{.TypeName}} deletes a {{.TypeName}} entity by its parents' path and {{.VarName}}.
	Delete{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}{{.VarName}} string) error
{{- end}}
}


type Repository struct {}
func NewRepository() IRepository {
	return Repository{}
}

{{- range .}}
func (Repository) Get{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}{{.VarName}} string) ({{.EntityName}}.{{.TypeName}}, error) {
	return Get{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID, {{end}}{{.VarName}})
}
func (Repository) Get{{.TypeName}}OrNew({{range .ParentsCamelCase}}{{.}}ID string, {{end}}{{.VarName}} string) ({{.EntityName}}.{{.TypeName}}, error) {
	return Get{{.TypeName}}OrNew({{range .ParentsCamelCase}}{{.}}ID, {{end}}{{.VarName}})
}
func (Repository) Get{{.TypeName}}ByPath(path string) ({{.EntityName}}.{{.TypeName}}, error) {
	return Get{{.TypeName}}ByPath(path)
}
func (Repository) Find{{.TypeName}}({{.ParentParams}}{{if gt (len .ParentParams) 0}}, {{end}}queries []database.Query) ({{.EntityName}}.{{.TypeName}}, error) {
	return Find{{.TypeName}}({{.ParentVars}}{{if gt (len .ParentVars) 0}}, {{end}}queries)
}
func (Repository) GetAll{{.TypeNamePlural}}({{.ParentParams}}) ([]{{.EntityName}}.{{.TypeName}}, error) {
	return GetAll{{.TypeNamePlural}}({{.ParentVars}})
}
func (Repository) GetAll{{.TypeNamePlural}}Paginated({{if gt (len .ParentParams) 0}}{{.ParentParams}}, {{end}}pagination database.Pagination) ([]{{.EntityName}}.{{.TypeName}}, database.Pagination, error) {
	return GetAll{{.TypeNamePlural}}Paginated({{if gt (len .ParentVars) 0}}{{.ParentVars}}, {{end}}pagination)
}
func (Repository) Query{{.TypeNamePlural}}({{.ParentParams}}{{if gt (len .ParentParams) 0}}, {{end}}queries []database.Query, pagination database.Pagination) ([]{{.EntityName}}.{{.TypeName}}, database.Pagination, error) {
	return Query{{.TypeNamePlural}}({{.ParentVars}}{{if gt (len .ParentVars) 0}}, {{end}}queries, pagination)
}
func (Repository) Query{{.TypeNamePlural}}Group(queries []database.Query) ([]{{.EntityName}}.{{.TypeName}}, error) {
	return Query{{.TypeNamePlural}}Group(queries)
}
func (Repository) Create{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}entity {{.EntityName}}.{{.TypeName}}, editorID *string) (string, error) {
	return Create{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID, {{end}}entity, editorID)
}
func (Repository) Update{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}entity {{.EntityName}}.{{.TypeName}}, editorID *string) (string, error) {
	return Update{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID, {{end}}entity, editorID)
}
func (Repository) Save{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}entity {{.EntityName}}.{{.TypeName}}, editorID *string) (string, error) {
	return Save{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID, {{end}}entity, editorID)
}
func (Repository) Delete{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID string, {{end}}{{.VarName}} string) error {
	return Delete{{.TypeName}}({{range .ParentsCamelCase}}{{.}}ID, {{end}}{{.VarName}})
}
{{- end}}