import { defineStore } from 'pinia'
import { {{.TypeName}} } from './entity'
import { {{.TypeName}}List } from './list.gen'
import type { {{.TypeName}}Store, {{.TypeName}}StoreState } from './store.gen.d'
import { analytics, auth } from '@/firebase'
import { type JSONData } from '../../base_classes/dto.d'
import { Pagination } from "../../base_classes/pagination";
import { Query } from "../../base_classes/query";
import { paginationAndQueriesToCacheKey } from "../../base_classes/dto_list";


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

const {{.TypeNameLowercase}}List = new {{.TypeName}}List()
export const use{{.TypeName}}Store = defineStore('{{.TypeNameLowercase}}Store', {
  state: (): {{.TypeName}}StoreState => ({
    activeID: null,
    cache: {},
    list: [] as {{.TypeName}}[],
    retrievalTimestamp: 0,
    updateKey: 0,
    storeUpdateTimeout: null,
  }),
  actions: {
    initializeStore(): void {
      this.convertList()
    },
    emitFormUpdateEvent(id: string): void {
      window.dispatchEvent(new CustomEvent("form-update-{{.TypeName}}", { detail: { id } }));
    },
    emitStoreUpdateEvent(): void {
      // Clear existing timeout
      if (this.storeUpdateTimeout !== null) {
        clearTimeout(this.storeUpdateTimeout)
      }

      // Set new timeout
      this.storeUpdateTimeout = setTimeout(() => {
        window.dispatchEvent(new CustomEvent("store.update.{{.TypeName}}"));
        this.storeUpdateTimeout = null
      }, 1500)
    },
    async activate({{.TypeNameLowercase}}: {{.TypeName}}): Promise<void> {
      // Set active
      await {{.TypeNameLowercase}}
        .activate(auth.firebaseUser?.uid)
        .then(() => {
          this.activeID = {{.TypeNameLowercase}}.id
        })
        .catch((error) => {
          console.error(error)
          this.activeID = null
        })
    },
    add({{.TypeNameLowercase}}: {{.TypeName}}): void {
      const id = {{.TypeNameLowercase}}.id
      if (typeof id === 'string' && !this.contains(id)) {
        this.list.push({{.TypeNameLowercase}})

        // Set active
        if (this.active === null) {
          this.activeID = {{.TypeNameLowercase}}.id
        }
      } else {
        this.reinsert({{.TypeNameLowercase}})
      }
      this.updateKey += 1;
    },
    convertList(): void {
      this.list = (this.list as {{.TypeName}}[]).map((x: any) => {
        const {{.TypeNameLowercase}} = new {{.TypeName}}({
    {{- range .ParentsSnakeCase}}
    {{.}}_id: x.{{.}}_id,
    {{- end}}})
        {{.TypeNameLowercase}}.set(x as JSONData)
        return {{.TypeNameLowercase}}
      })
    },
    async delete({{.TypeNameLowercase}}: {{.TypeName}}): Promise<void> {
      await {{.TypeNameLowercase}}.delete().then(() => {
        this.remove({{.TypeNameLowercase}})
      }).finally(() => {
        this.emitStoreUpdateEvent()
      });
    },
    async deleteById(id: string): Promise<void> {
      const {{.TypeNameLowercase}} = (this.list as {{.TypeName}}[]).find((x: {{.TypeName}}) => x.id === id)
      if ({{.TypeNameLowercase}} !== undefined) {
        await this.delete({{.TypeNameLowercase}})
      } else {
        throw new Error('Could not find {{.TypeName}} with id: ' + id)
      }
    },
    contains(id: string): boolean {
      return (this.list as {{.TypeName}}[]).some((x: {{.TypeName}}) => x.id === id)
    },
    get(id: string): {{.TypeName}} | null {
      return (this.list as {{.TypeName}}[]).find((x: {{.TypeName}}) => x.id === id) || null
    },
    reinsert({{.TypeNameLowercase}}: {{.TypeName}}): void {
      const index = (this.list as {{.TypeName}}[]).findIndex((x: {{.TypeName}}) => x.id === {{.TypeNameLowercase}}.id)
      if (index !== -1) {
        this.list = [
          ...this.list.slice(0, index),
          {{.TypeNameLowercase}},
          ...this.list.slice(index + 1),
        ]
      } else {
        this.add({{.TypeNameLowercase}})
      }
      this.updateKey += 1;
    },
    remove({ id }: {{.TypeName}}): void {
      const index = (this.list as {{.TypeName}}[]).findIndex((x: {{.TypeName}}) => x.id === id)
      if (index !== -1) {
        this.list = [
          ...this.list.slice(0, index),
          ...this.list.slice(index + 1),
        ]
      }
      this.updateKey += 1;
    },
    async retrieve({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}id: string, force = false): Promise<{{.TypeName}}> {
      // Check if a refresh is required
      if (!force && !this.refreshRequired) {
        const {{.TypeNameLowercase}} = this.get(id)
        if ({{.TypeNameLowercase}} !== null) {
          return {{.TypeNameLowercase}}
        }
      }

      // Retrieve {{.TypeNameLowercase}}
      const {{.TypeNameLowercase}} = new {{.TypeName}}({
    {{- range .ParentsSnakeCase}}
    {{.}}_id: 'none',
    {{- end}}})

      // Get {{.TypeNameLowercase}}
      await {{.TypeNameLowercase}}.get([{{range .ParentsCamelCase}}{{.}}Id, {{end}}id]).then(async (entity) => {
        this.reinsert(entity)

        // Activate {{.TypeNameLowercase}}
        await this.activate(entity)
      })

      return {{.TypeNameLowercase}}
    },
    async retrieveAll({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}force = false): Promise<{
      active: string | null
      items: {{.TypeName}}[]
    }> {
      // Check if a refresh is required
      if (!force && !this.refreshRequired) {
        return {
          active: this.activeID,
          items: this.list as {{.TypeName}}[],
        }
      }

      // Clear list
      while (this.list.length > 0) {
        this.list.pop()
      }

      // Retrieve list
      await {{.TypeNameLowercase}}List.getAll().then(async (list) => {
        list.forEach(({{.TypeNameLowercase}}) => {
          this.reinsert({{.TypeNameLowercase}})
        })

        // Activate {{.TypeNameLowercase}}
        if (list.length > 0) {
          if ({{.TypeNameLowercase}}List.active !== null) {
            this.activeID = {{.TypeNameLowercase}}List.active
          } else {
            await this.activate(list[0])
          }
        }
      })

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now()

      // Set user property
      if (this.activeID !== null) {
        analytics.setUserProperty('{{.EntityName}}_id', this.activeID)
      }

      return {
        active: this.activeID,
        items: this.list as {{.TypeName}}[],
      }
    },
    async retrievePaginated(pagination: Pagination, force = false): Promise<{
      pagination: Pagination;
      items: {{.TypeName}}[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = pagination.toCacheKey();

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          pagination: cached.pagination.deepCopy(),
          items: cached.ids.map((id: string) => this.get(id) as {{.TypeName}}),
        };
      }

      // Retrieve list
      const items = await {{.TypeNameLowercase}}List.getPaginated(
        [],
        pagination
      ).then(async ({items, pagination }) => {
        items.forEach(({{.TypeNameLowercase}}) => {
          this.reinsert({{.TypeNameLowercase}});
        });

        // Set new pagination
        newPagination = pagination.deepCopy();

        return items;
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: {{.TypeName}}) => x.id),
        pagination: newPagination,
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        pagination: newPagination,
        items,
      };
    },
    async query({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}queries: Query[], pagination: Pagination, force = false): Promise<{
      pagination: Pagination;
      items: {{.TypeName}}[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = paginationAndQueriesToCacheKey(pagination, queries);

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          pagination: cached.pagination.deepCopy(),
          items: cached.ids.map((id: string) => this.get(id) as {{.TypeName}}),
        };
      }

      // Retrieve list
      const items = await {{.TypeNameLowercase}}List.query(
        queries,
        pagination,
      ).then(async ({ items, pagination }) => {
        items.forEach(({{.TypeNameLowercase}}) => {
          this.reinsert({{.TypeNameLowercase}});
        });

        // Set new pagination
        newPagination = pagination.deepCopy();;

        return items
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: {{.TypeName}}) => x.id),
        pagination: newPagination.deepCopy(),
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        pagination: newPagination,
        items: items,
      };
    },
    async search(
      {{range .ParentsCamelCase}}{{.}}Id: string, {{end}}
      query: string,
      pagination: Pagination,
      force = false,
    ): Promise<{
      pagination: Pagination;
      items: {{.TypeName}}[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = query.replaceAll(" ", "_") + '-' + pagination.toCacheKey();

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          items: cached.ids.map(
            (id: string) => this.get(id) as {{.TypeName}},
          ),
          pagination: cached.pagination.deepCopy(),
        };
      }

      // Retrieve list
      const items = await {{.TypeNameLowercase}}List
        .search(query, pagination)
        .then(async ({ items, pagination }) => {
          items.forEach(({{.TypeNameLowercase}}) => {
            this.reinsert({{.TypeNameLowercase}});
          });

          // Set new pagination
          newPagination = pagination.deepCopy();

          return items;
        });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: {{.TypeName}}) => x.id),
        pagination: newPagination.deepCopy(),
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        items: items,
        pagination: newPagination,
      };
    },
    async update({{.TypeNameLowercase}}: {{.TypeName}}): Promise<string> {
      // Update {{.TypeNameLowercase}}
      await {{.TypeNameLowercase}}.update()

      // Reinsert {{.TypeNameLowercase}}
      this.reinsert({{.TypeNameLowercase}})

      // Activate {{.TypeNameLowercase}}
      if (this.active === null) {
        await this.activate({{.TypeNameLowercase}})
      }
      
      this.emitStoreUpdateEvent()

      return {{.TypeNameLowercase}}.id
    },
  },
  getters: {
    active(): {{.TypeName}} | null {
      if (this.activeID === null) {
        return null
      }

      const {{.TypeNameLowercase}} = (this.list as {{.TypeName}}[]).find((x: {{.TypeName}}) => x.id === this.activeID)
      if ({{.TypeNameLowercase}} === undefined) {
        return null
      }

      return {{.TypeNameLowercase}}
    },
    refreshRequired(): boolean {
      return (
        this.retrievalTimestamp === 0 ||
        this.retrievalTimestamp < Date.now() - 30 * 60000 ||
        this.list.length === 0
      )
    },
  },
})

// Export a function to create a new instance of the store
export function create{{.TypeName}}Store(): {{.TypeName}}Store {
  const store = use{{.TypeName}}Store()
  // Run the initializeStore action when the store is created
  store.initializeStore()
  return store as unknown as {{.TypeName}}Store // TODO: Fix this
}
