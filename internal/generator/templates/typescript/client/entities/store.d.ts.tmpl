import { type {{.TypeName}} } from './entity'
import { type Store } from 'pinia'


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the {{.TypeNameLowercase}} store.
 */
export interface {{.TypeName}}StoreState {
  /**
   * The currently active {{.TypeNameLowercase}} ID
   */
  activeID: string | null

  /**
   * A cache of {{.TypeNameLowercase}}s.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of {{.TypeNameLowercase}}s.
   */
  list: {{.TypeName}}[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an {{.TypeName}}Store that extends the Store interface.
 */
export interface {{.TypeName}}Store extends {{.TypeName}}StoreState, Store {
  /**
   * Fire a form update event for the {{.TypeName}}.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all {{.TypeName}}.
   */
  emitStoreUpdateEvent: () => void

  /**
   * The currently active {{.TypeNameLowercase}}
   */
  active: {{.TypeName}}

  /**
   * Adds an {{.TypeNameLowercase}} to the local {{.TypeName}}Store.
   * @param {{.TypeNameLowercase}} The {{.TypeNameLowercase}} to be added.
   */
  add: ({{.TypeNameLowercase}}: {{.TypeName}}) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Deletes an {{.TypeNameLowercase}} from the {{.TypeName}}Store from the external database.
   * @param {{.TypeNameLowercase}} The {{.TypeNameLowercase}} to be deleted.
   * @returns {Promise<void>} A promise that resolves when the {{.TypeNameLowercase}} is deleted.
   */
  delete: ({{.TypeNameLowercase}}: {{.TypeName}}) => Promise<void>

  /**
   * Deletes an {{.TypeNameLowercase}} by ID from the {{.TypeName}}Store from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the {{.TypeNameLowercase}} is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Get a {{.TypeName}} from the local {{.TypeName}}Store.
   * @returns { {{.TypeName}} | null } The {{.TypeNameLowercase}}.
   */
  get: (id: string) => {{.TypeName}} | null

  /**
   * Reinserts an {{.TypeNameLowercase}} to the {{.TypeName}}Store list.
   * @param {{.TypeNameLowercase}} The {{.TypeNameLowercase}} to be reinserted.
   * @returns {void}
   */
  reinsert: ({{.TypeNameLowercase}}: {{.TypeName}}) => void

  /**
   * Removes an {{.TypeNameLowercase}} from the local {{.TypeName}}Store.
   * @param {{.TypeNameLowercase}} The {{.TypeNameLowercase}} to be removed.
   * @returns {void}
   */
  remove: ({{.TypeNameLowercase}}: {{.TypeName}}) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single {{.TypeName}} from either the local {{.TypeName}}Store or external source, if forced or required.
   {{- range .ParentsCamelCase}}
   * @param {{.}}Id The ID of the parent {{.}}.
    {{- end}}
    * @param id The ID of the {{.TypeName}} to retrieve.
    * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves when the {{.TypeNameLowercase}} is set as active.
   */
  retrieve: ({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}id: string, force?: boolean) => Promise<{{.TypeName}}>

  /**
   * Retrieves all {{.TypeNameLowercase}}s from the {{.TypeName}}Store or external source, depending if a refresh is required.
   {{- range .ParentsCamelCase}}
   * @param {{.}}Id The ID of the parent {{.}}.
    {{- end}}
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves with an array of {{.TypeNameLowercase}}s.
   */
  retrieveAll: ({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}force?: boolean) => Promise<{
    active: string | null
    items: {{.TypeName}}[]
  }>

  /**
    * Retrieves {{.TypeNameLowercase}}s paginated from the external source
    {{- range .ParentsCamelCase}}
    * @param {{.}}Id The ID of the parent {{.}}.
      {{- end}}
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of {{.TypeNameLowercase}}s.
    */
  retrievePaginated: ({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: {{.TypeName}}[]
  }>

  /**
    * Queries {{.TypeNameLowercase}}s from the external source
    {{- range .ParentsCamelCase}}
    * @param {{.}}Id The ID of the parent {{.}}.
      {{- end}}
    * @param queries The queries to be used for filtering.
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of {{.TypeNameLowercase}}s.
    */
  query: ({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: {{.TypeName}}[]
  }>

  /**
   * Update an {{.TypeNameLowercase}} from the {{.TypeName}}Store in the external database.
   * @param {{.TypeNameLowercase}} The {{.TypeNameLowercase}} to be updated.
   * @param connect Indicates whether the {{.TypeNameLowercase}} should be connected to the user on update.
   * @returns {Promise<string>} A promise that resolves to the ID as a string when the {{.TypeNameLowercase}} is updated.
   */
  update: ({{.TypeNameLowercase}}: {{.TypeName}}) => Promise<string>

  /**
    * Searches for {{.TypeNameLowercase}}s in the external source.
    {{- range .ParentsCamelCase}}
    * @param {{.}}Id The ID of the parent {{.}}.
    {{- end}}
    * @param query The query to be used for searching.
    * @returns {Promise<void>} A promise that resolves with an array of {{.TypeNameLowercase}}s.
    */
  search: ({{range .ParentsCamelCase}}{{.}}Id: string, {{end}}query: string, pagination: Pagination, force?: boolean) => Promise<{{.TypeName}}[]>
}
