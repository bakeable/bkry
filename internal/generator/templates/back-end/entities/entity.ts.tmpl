import { type JSONData } from '../../base_classes/dto.d'
import { {{.TypeName}}Dto } from './dto.gen'
import { type I{{.TypeName}} } from './entity.d'
import {{.TypeName}}Parsers from './parsers'
import {{.TypeName}}Validators from './custom_validators'

export class {{.TypeName}} extends {{.TypeName}}Dto implements I{{.TypeName}} {
  constructor(pathVars?: string | string[] | { 
    {{- range .ParentsSnakeCase}}
    {{.}}_id: string,
    {{- end}}
    id?: string,
  }, data?: JSONData) {
    super(data, {{.TypeName}}Parsers, {{.TypeName}}Validators)

    if (data !== undefined) {
      // Set data
      this.set(data)
    }

    this.buildPathObject(pathVars);
  }
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////

  /// ///////////////////////////////////////
  /// ////////////// METHODS ////////////////
  /// ///////////////////////////////////////

  public async get(
    pathVars?: string | string[] | { 
    {{- range .ParentsSnakeCase}}
    {{.}}_id: string,
    {{- end}}
    id?: string,
  } | undefined
  ): Promise<{{.TypeName}}> {
    return (await super.get(pathVars)) as {{.TypeName}}
  }

  /// ///////////////////////////////////////
  /// /////////// STATIC METHODS ////////////
  /// ///////////////////////////////////////

  static override FromJSON(data?: JSONData): {{.TypeName}} {
    return new {{.TypeName}}(undefined, data)
  }

  static override FromJSONArray(data: JSONData[]): {{.TypeName}}[] {
    return data.map((item) => {{.TypeName}}.FromJSON(item))
  }

  static FromDto(dto: {{.TypeName}}Dto): {{.TypeName}} {
    return new {{.TypeName}}(undefined, dto.toJSON())
  }
}

