package tag_localisation_controllers

import (
	tag_localisation_operations "github.com/bakeable/bkry/internal/server/transport/operations/tag_localisation"
	"github.com/bakeable/bkry/internal/server/database"
	"github.com/bakeable/bkry/tools"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

//// THIS FILE IS AUTOGENERATED. DO NOT EDIT
//// IF YOU WISH TO EDIT THIS CONTROLLER, REMOVE THE .gen.go EXTENSION
//// THIS WAY, IT WON'T BE OVERWRITTEN AND THERE WON'T BE A CONTROLLER GENERATED

type QueryBody struct {
	Queries    []database.Query    `json:"queries"`
	Pagination database.Pagination `json:"pagination"`
}

func Query(c *gin.Context) {
	defer func() {
		if r := recover(); r != nil {
			errMsg := fmt.Sprintf("%v", r)
			url := utils.ExtractURLFromErrorMessage(errMsg)
			if url == "" {
				c.JSON(http.StatusInternalServerError, gin.H{"error": errMsg})
				return
			}
			c.JSON(http.StatusExpectationFailed, gin.H{"error": errMsg, "url": url})
		}
	}()

	// Get tag ID from URL
	tagID := c.Param("tagID")


	// Parse queries and format as []database.Query{}
	var queryBody QueryBody
	if err := c.ShouldBindJSON(&queryBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	
	// Get tag_localisations from queries
	entities := tag_localisation_operations.Query(getRepository(), tagID, queryBody.Queries, queryBody.Pagination)

	// Return tag_localisation
	c.JSON(http.StatusOK, gin.H{"items": entities, "pagination": queryBody.Pagination })
}