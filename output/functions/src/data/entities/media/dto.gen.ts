import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IMediaDto, ContentType,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const ContentTypeValues: Record<string,ContentType> = Object.freeze({
  IMAGE: 'image',
  VIDEO: 'video',
  AUDIO: 'audio',
  FILE: 'file',
})

export class MediaDto extends Dto implements IMediaDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/media/{id}'
  _reference = '/Media/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    contentType = ContentTypeValues.Image
    
    
    description = ""
    
    
    extension = ""
    
    
    filename = ""
    
    
    mimeType = ""
    
    
    size = ""
    
    
    storagePath = ""
    
    
    url = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): MediaDto {
    // Create a new instance of the class
    const obj = new MediaDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): MediaDto[] {
    return data.map((item) => MediaDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.contentType !== undefined && data.contentType !== null ) {
        this.contentType = ContentTypeValues[(data?.contentType as string)?.toUpperCase() ?? this.contentType.toUpperCase()]
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.extension !== undefined && data.extension !== null ) {
      this.extension = data.extension as string ?? this.extension
      
    }
    if (data.filename !== undefined && data.filename !== null ) {
      this.filename = data.filename as string ?? this.filename
      
    }
    if (data.mimeType !== undefined && data.mimeType !== null ) {
      this.mimeType = data.mimeType as string ?? this.mimeType
      
    }
    if (data.size !== undefined && data.size !== null ) {
      this.size = data.size as string ?? this.size
      
    }
    if (data.storagePath !== undefined && data.storagePath !== null ) {
      this.storagePath = data.storagePath as string ?? this.storagePath
      
    }
    if (data.url !== undefined && data.url !== null ) {
      this.url = data.url as string ?? this.url
      
    }
  }

}
