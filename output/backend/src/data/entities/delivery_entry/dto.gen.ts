import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IDeliveryEntryDto, IExamination,  } from './dto.gen.d'
import { ExaminationTask } from '../examination_task'
import { Product } from '../product'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class DeliveryEntryDto extends Dto implements IDeliveryEntryDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/delivery_entry/{id}'
  _reference = '/DeliveryEntry/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    customerId = ""
    
    
    customerName = ""
    
    
    date = ""
    
    
    description = ""
    
    
    description_2 = ""
    
    
    examination: IExamination = {
      priority: false,
      priorityScore: 0,
      properties: {} satisfies Record<string, any>,
      timeout: 0,
    }

    
    
    examinationTasks: ExaminationTask[] = []
    
    
    extraDescription = ""
    
    
    guid = ""
    
    
    orderNumber = ""
    
    
    orderType = ""
    
    
    product = new Product()
    
    
    serialNumber = 0
    
    
    sku = ""
    
    
    unitType = ""
    
    
    units = 0
    
    
    unitsPerPallet = 0
    
    
    warehouse = ""
    
    
    _kind = "DeliveryEntry"
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): DeliveryEntryDto {
    // Create a new instance of the class
    const obj = new DeliveryEntryDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): DeliveryEntryDto[] {
    return data.map((item) => DeliveryEntryDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.customerId !== undefined && data.customerId !== null ) {
      this.customerId = data.customerId as string ?? this.customerId
      
    }
    if (data.customerName !== undefined && data.customerName !== null ) {
      this.customerName = data.customerName as string ?? this.customerName
      
    }
    if (data.date !== undefined && data.date !== null ) {
      this.date = data.date as string ?? this.date
      
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.description_2 !== undefined && data.description_2 !== null ) {
      this.description_2 = data.description_2 as string ?? this.description_2
      
    }
    if (data.examination !== undefined && data.examination !== null ) {
      if (data.examination) {
        this.examination = Examination.FromJSON(data.examination)
      }
    }
    if (data.examinationTasks !== undefined && data.examinationTasks !== null && Array.isArray(data.examinationTasks)) {
      this.examinationTasks = ExaminationTask.FromJSONArray(data.examinationTasks as JSONData[])
    }
    if (data.extraDescription !== undefined && data.extraDescription !== null ) {
      this.extraDescription = data.extraDescription as string ?? this.extraDescription
      
    }
    if (data.guid !== undefined && data.guid !== null ) {
      this.guid = data.guid as string ?? this.guid
      
    }
    if (data.orderNumber !== undefined && data.orderNumber !== null ) {
      this.orderNumber = data.orderNumber as string ?? this.orderNumber
      
    }
    if (data.orderType !== undefined && data.orderType !== null ) {
      this.orderType = data.orderType as string ?? this.orderType
      
    }
    if (data.product !== undefined && data.product !== null ) {
      if (!this.product) {
        this.product = new Product()
      }
      this.product.set(data.product as JSONData ?? this.product.toJSON())
    }
    if (data.serialNumber !== undefined && data.serialNumber !== null ) {
      this.serialNumber = data.serialNumber as number ?? this.serialNumber
      
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
    if (data.unitType !== undefined && data.unitType !== null ) {
      this.unitType = data.unitType as string ?? this.unitType
      
    }
    if (data.units !== undefined && data.units !== null ) {
      this.units = data.units as number ?? this.units
      
    }
    if (data.unitsPerPallet !== undefined && data.unitsPerPallet !== null ) {
      this.unitsPerPallet = data.unitsPerPallet as number ?? this.unitsPerPallet
      
    }
    if (data.warehouse !== undefined && data.warehouse !== null ) {
      this.warehouse = data.warehouse as string ?? this.warehouse
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
  }

}

export class Examination implements IExamination {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      priority = false
    
    
      priorityScore = 0
    
    
      properties = {} satisfies Record<string, any>
    
    
      timeout = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Examination {
    // Create a new instance of the class
    const obj = new Examination()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Examination[] {
    return data.map((item) => Examination.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.priority !== undefined && data.priority !== null ) {
      this.priority = data.priority as boolean ?? this.priority
      
    }
    if (data.priorityScore !== undefined && data.priorityScore !== null ) {
      this.priorityScore = data.priorityScore as number ?? this.priorityScore
      
    }
    if (data.properties !== undefined && data.properties !== null ) {
      this.properties = data.properties as Record<string, any> ?? this.properties
      
    }
    if (data.timeout !== undefined && data.timeout !== null ) {
      this.timeout = data.timeout as number ?? this.timeout
      
    }
  }
}
