import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IQuotationDto, ICustomer, ILineItems, ITotals, QuotationStatus,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const QuotationStatusValues: Record<string,QuotationStatus> = Object.freeze({
  CONCEPT: 'concept',
  READY: 'ready',
})

export class QuotationDto extends Dto implements IQuotationDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/quotation/{id}'
  _reference = '/Quotation/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    customer: ICustomer = {
      address: "",
      email: "",
      name: "",
      phone: "",
    }

    
    
    _kind = "Quotation"
    
    
    lineItems: ILineItems[] = []

    
    
    name = ""
    
    
    notes = ""
    
    
    referralCode = ""
    
    
    status = QuotationStatusValues.concept
    
    
    statusIndex = 0
    
    
    totals: ITotals = {
      finalPrice: 0.0,
      marginAmount: 0.0,
      marginPercentage: 0.0,
      totalCosts: 0.0,
    }

    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): QuotationDto {
    // Create a new instance of the class
    const obj = new QuotationDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): QuotationDto[] {
    return data.map((item) => QuotationDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.customer !== undefined && data.customer !== null ) {
      if (data.customer) {
        this.customer = Customer.FromJSON(data.customer)
      }
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.lineItems !== undefined && data.lineItems !== null && Array.isArray(data.lineItems)) {
      if (data.lineItems) {
        this.lineItems = LineItems.FromJSONArray(data.lineItems as JSONData[])
      }
    }
    if (data.name !== undefined && data.name !== null ) {
      this.name = data.name as string ?? this.name
      
    }
    if (data.notes !== undefined && data.notes !== null ) {
      this.notes = data.notes as string ?? this.notes
      
    }
    if (data.referralCode !== undefined && data.referralCode !== null ) {
      this.referralCode = data.referralCode as string ?? this.referralCode
      
    }
    if (data.status !== undefined && data.status !== null ) {
        this.status = QuotationStatusValues[(data?.status as string)?.toUpperCase() ?? this.status.toUpperCase()]
    }
    if (data.statusIndex !== undefined && data.statusIndex !== null ) {
      this.statusIndex = data.statusIndex as number ?? this.statusIndex
      
    }
    if (data.totals !== undefined && data.totals !== null ) {
      if (data.totals) {
        this.totals = Totals.FromJSON(data.totals)
      }
    }
  }

}

export class Customer implements ICustomer {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      address = ""
    
    
      email = ""
    
    
      name = ""
    
    
      phone = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Customer {
    // Create a new instance of the class
    const obj = new Customer()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Customer[] {
    return data.map((item) => Customer.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.address !== undefined && data.address !== null ) {
      this.address = data.address as string ?? this.address
      
    }
    if (data.email !== undefined && data.email !== null ) {
      this.email = data.email as string ?? this.email
      
    }
    if (data.name !== undefined && data.name !== null ) {
      this.name = data.name as string ?? this.name
      
    }
    if (data.phone !== undefined && data.phone !== null ) {
      this.phone = data.phone as string ?? this.phone
      
    }
  }
}

export class LineItems implements ILineItems {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      attributes = {} satisfies Record<string, string>
    
    
      finalPrice = 0.0
    
    
      fixedCosts = 0.0
    
    
      marginAmount = 0.0
    
    
      marginPercentage = 0.0
    
    
      product = new Product()
    
    
      totalCosts = 0.0
    
    
      units = 0
    
    
      variableCosts = 0.0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): LineItems {
    // Create a new instance of the class
    const obj = new LineItems()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): LineItems[] {
    return data.map((item) => LineItems.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.attributes !== undefined && data.attributes !== null ) {
      this.attributes = data.attributes as Record<string, string> ?? this.attributes
      
    }
    if (data.finalPrice !== undefined && data.finalPrice !== null ) {
      this.finalPrice = data.finalPrice as number ?? this.finalPrice
      
    }
    if (data.fixedCosts !== undefined && data.fixedCosts !== null ) {
      this.fixedCosts = data.fixedCosts as number ?? this.fixedCosts
      
    }
    if (data.marginAmount !== undefined && data.marginAmount !== null ) {
      this.marginAmount = data.marginAmount as number ?? this.marginAmount
      
    }
    if (data.marginPercentage !== undefined && data.marginPercentage !== null ) {
      this.marginPercentage = data.marginPercentage as number ?? this.marginPercentage
      
    }
    if (data.product !== undefined && data.product !== null ) {
      if (data.product) {
        this.product = Product.FromJSON(data.product)
      }
    }
    if (data.totalCosts !== undefined && data.totalCosts !== null ) {
      this.totalCosts = data.totalCosts as number ?? this.totalCosts
      
    }
    if (data.units !== undefined && data.units !== null ) {
      this.units = data.units as number ?? this.units
      
    }
    if (data.variableCosts !== undefined && data.variableCosts !== null ) {
      this.variableCosts = data.variableCosts as number ?? this.variableCosts
      
    }
  }
}

export class Product {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      id = ""
    
    
      name = ""
    
    
      sku = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Product {
    // Create a new instance of the class
    const obj = new Product()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Product[] {
    return data.map((item) => Product.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.id !== undefined && data.id !== null ) {
      this.id = data.id as string ?? this.id
      
    }
    if (data.name !== undefined && data.name !== null ) {
      this.name = data.name as string ?? this.name
      
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
  }
}

export class Totals implements ITotals {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      finalPrice = 0.0
    
    
      marginAmount = 0.0
    
    
      marginPercentage = 0.0
    
    
      totalCosts = 0.0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Totals {
    // Create a new instance of the class
    const obj = new Totals()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Totals[] {
    return data.map((item) => Totals.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.finalPrice !== undefined && data.finalPrice !== null ) {
      this.finalPrice = data.finalPrice as number ?? this.finalPrice
      
    }
    if (data.marginAmount !== undefined && data.marginAmount !== null ) {
      this.marginAmount = data.marginAmount as number ?? this.marginAmount
      
    }
    if (data.marginPercentage !== undefined && data.marginPercentage !== null ) {
      this.marginPercentage = data.marginPercentage as number ?? this.marginPercentage
      
    }
    if (data.totalCosts !== undefined && data.totalCosts !== null ) {
      this.totalCosts = data.totalCosts as number ?? this.totalCosts
      
    }
  }
}
