import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IPortalEventDto, PortalEventType,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const PortalEventTypeValues: Record<string,PortalEventType> = Object.freeze({
  CREATED: 'Created',
  UPDATED: 'Updated',
  DELETED: 'Deleted',
  NEW: 'New',
  PUSH: 'Push',
  PRINT: 'Print',
  PRINTLABEL: 'PrintLabel',
  EMAILSENT: 'EmailSent',
  EMAILRECEIVED: 'EmailReceived',
  ERROR: 'Error',
  STATUSUPDATE: 'StatusUpdate',
})

export class PortalEventDto extends Dto implements IPortalEventDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/portal_event/{id}'
  _reference = '/PortalEvent/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    entityId = ""
    
    
    entityName = ""
    
    
    _kind = "PortalEvent"
    
    
    metadata = {}
    
    
    timestamp = 0
    
    
    timezone = 0
    
    
    type = PortalEventTypeValues.Update
    
    
    userId = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): PortalEventDto {
    // Create a new instance of the class
    const obj = new PortalEventDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): PortalEventDto[] {
    return data.map((item) => PortalEventDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.entityId !== undefined && data.entityId !== null ) {
      this.entityId = data.entityId as string ?? this.entityId
      
    }
    if (data.entityName !== undefined && data.entityName !== null ) {
      this.entityName = data.entityName as string ?? this.entityName
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.metadata !== undefined && data.metadata !== null ) {
      this.metadata = data.metadata as Record<string, any> ?? this.metadata
      
    }
    if (data.timestamp !== undefined && data.timestamp !== null ) {
      this.timestamp = data.timestamp as number ?? this.timestamp
      
    }
    if (data.timezone !== undefined && data.timezone !== null ) {
      this.timezone = data.timezone as number ?? this.timezone
      
    }
    if (data.type !== undefined && data.type !== null ) {
        this.type = PortalEventTypeValues[(data?.type as string)?.toUpperCase() ?? this.type.toUpperCase()]
    }
    if (data.userId !== undefined && data.userId !== null ) {
      this.userId = data.userId as string ?? this.userId
      
    }
  }

}
