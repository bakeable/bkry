import { type QuestionBundleLocalisation } from './interface.gen'
import { type Store } from 'pinia'
import { Pagination } from "../../general/pagination"
import { Query } from "../../general/query"

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the questionBundleLocalisation store.
 */
export interface QuestionBundleLocalisationStoreState {
  /**
   * The currently active questionBundleLocalisation ID
   */
  activeID: string | null

  /**
   * A cache of questionBundleLocalisations.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of questionBundleLocalisations.
   */
  list: QuestionBundleLocalisation[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an QuestionBundleLocalisationStore that extends the Store interface.
 */
export interface QuestionBundleLocalisationStore extends QuestionBundleLocalisationStoreState, Store {
  /**
   * The currently active questionBundleLocalisation
   */
  active: QuestionBundleLocalisation | null

  /**
   * Adds an questionBundleLocalisation to the local QuestionBundleLocalisationStore.
   * @param questionBundleLocalisation The questionBundleLocalisation to be added.
   */
  add: (questionBundleLocalisation: QuestionBundleLocalisation) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Creates a new questionBundleLocalisation in the external database and updates the store.
   * @param questionBundleLocalisation The questionBundleLocalisation to be created.
   * @returns {Promise<QuestionBundleLocalisation>} A promise that resolves with the created questionBundleLocalisation.
   */
  create: (questionBundleId: string, questionBundleLocalisation: QuestionBundleLocalisation) => Promise<QuestionBundleLocalisation>

  /**
   * Deletes an questionBundleLocalisation from the QuestionBundleLocalisationStore from the external database.
   * @param questionBundleLocalisation The questionBundleLocalisation to be deleted.
   * @returns {Promise<void>} A promise that resolves when the questionBundleLocalisation is deleted.
   */
  delete: (questionBundleLocalisation: QuestionBundleLocalisation) => Promise<void>

  /**
   * Deletes an questionBundleLocalisation by ID from the QuestionBundleLocalisationStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the questionBundleLocalisation is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Fire a form update event for the QuestionBundleLocalisation.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all QuestionBundleLocalisations.
   */
  emitStoreUpdateEvent: () => void

  /**
   * Get a QuestionBundleLocalisation from the local QuestionBundleLocalisationStore.
   * @returns { QuestionBundleLocalisation | null } The questionBundleLocalisation.
   */
  get: (id: string) => QuestionBundleLocalisation | null

  /**
   * Queries questionBundleLocalisations from the external source
   * @param queries The queries to be used for filtering.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: QuestionBundleLocalisation[] }>} A promise that resolves with queried questionBundleLocalisations.
   */
  query: (questionBundleId: string, queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: QuestionBundleLocalisation[]
  }>

  /**
   * Reinserts an questionBundleLocalisation to the QuestionBundleLocalisationStore list.
   * @param questionBundleLocalisation The questionBundleLocalisation to be reinserted.
   * @returns {void}
   */
  reinsert: (questionBundleLocalisation: QuestionBundleLocalisation) => void

  /**
   * Removes an questionBundleLocalisation from the local QuestionBundleLocalisationStore.
   * @param questionBundleLocalisation The questionBundleLocalisation to be removed.
   * @returns {void}
   */
  remove: ({ id }: QuestionBundleLocalisation) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single QuestionBundleLocalisation from either the local QuestionBundleLocalisationStore or external source, if forced or required.
   * @param id The ID of the QuestionBundleLocalisation to retrieve.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<QuestionBundleLocalisation>} A promise that resolves when the questionBundleLocalisation is set as active.
   */
  retrieve: (questionBundleId: string, id: string, force?: boolean) => Promise<QuestionBundleLocalisation>

  /**
   * Retrieves all questionBundleLocalisations from the QuestionBundleLocalisationStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<{ active: string | null; items: QuestionBundleLocalisation[] }>} A promise that resolves with an array of questionBundleLocalisations.
   */
  retrieveAll: (questionBundleId: string, force?: boolean) => Promise<{
    active: string | null
    items: QuestionBundleLocalisation[]
  }>

  /**
   * Retrieves questionBundleLocalisations paginated from the external source.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: QuestionBundleLocalisation[] }>} A promise that resolves with paginated questionBundleLocalisations.
   */
  retrievePaginated: (questionBundleId: string, pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: QuestionBundleLocalisation[]
  }>

  /**
   * Searches for questionBundleLocalisations in the external source.
   * @param search The search query string.
   * @param pagination The pagination to be used for the search.
   * @param force Whether to force the search to the external source.
   * @returns {Promise<{ pagination: Pagination; items: QuestionBundleLocalisation[] }>} A promise that resolves with search results.
   */
  search: (questionBundleId: string, search: string, pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: QuestionBundleLocalisation[]
  }>

  /**
   * Update an questionBundleLocalisation from the QuestionBundleLocalisationStore in the external database.
   * @param questionBundleLocalisation The questionBundleLocalisation to be updated.
   * @returns {Promise<QuestionBundleLocalisation>} A promise that resolves with the updated questionBundleLocalisation.
   */
  update: (questionBundleLocalisation: QuestionBundleLocalisation) => Promise<QuestionBundleLocalisation>
}
