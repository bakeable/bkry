import { type User } from './interface.gen'
import { type Store } from 'pinia'
import { Pagination } from "../../general/pagination"
import { Query } from "../../general/query"

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the user store.
 */
export interface UserStoreState {
  /**
   * The currently active user ID
   */
  activeID: string | null

  /**
   * A cache of users.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of users.
   */
  list: User[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an UserStore that extends the Store interface.
 */
export interface UserStore extends UserStoreState, Store {
  /**
   * The currently active user
   */
  active: User | null

  /**
   * Adds an user to the local UserStore.
   * @param user The user to be added.
   */
  add: (user: User) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Creates a new user in the external database and updates the store.
   * @param user The user to be created.
   * @returns {Promise<User>} A promise that resolves with the created user.
   */
  create: (user: User) => Promise<User>

  /**
   * Deletes an user from the UserStore from the external database.
   * @param user The user to be deleted.
   * @returns {Promise<void>} A promise that resolves when the user is deleted.
   */
  delete: (user: User) => Promise<void>

  /**
   * Deletes an user by ID from the UserStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the user is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Fire a form update event for the User.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all Users.
   */
  emitStoreUpdateEvent: () => void

  /**
   * Get a User from the local UserStore.
   * @returns { User | null } The user.
   */
  get: (id: string) => User | null

  /**
   * Queries users from the external source
   * @param queries The queries to be used for filtering.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: User[] }>} A promise that resolves with queried users.
   */
  query: (queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: User[]
  }>

  /**
   * Reinserts an user to the UserStore list.
   * @param user The user to be reinserted.
   * @returns {void}
   */
  reinsert: (user: User) => void

  /**
   * Removes an user from the local UserStore.
   * @param user The user to be removed.
   * @returns {void}
   */
  remove: ({ id }: User) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single User from either the local UserStore or external source, if forced or required.
   * @param id The ID of the User to retrieve.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<User>} A promise that resolves when the user is set as active.
   */
  retrieve: (id: string, force?: boolean) => Promise<User>

  /**
   * Retrieves all users from the UserStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<{ active: string | null; items: User[] }>} A promise that resolves with an array of users.
   */
  retrieveAll: (force?: boolean) => Promise<{
    active: string | null
    items: User[]
  }>

  /**
   * Retrieves users paginated from the external source.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: User[] }>} A promise that resolves with paginated users.
   */
  retrievePaginated: (pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: User[]
  }>

  /**
   * Searches for users in the external source.
   * @param search The search query string.
   * @param pagination The pagination to be used for the search.
   * @param force Whether to force the search to the external source.
   * @returns {Promise<{ pagination: Pagination; items: User[] }>} A promise that resolves with search results.
   */
  search: (search: string, pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: User[]
  }>

  /**
   * Update an user from the UserStore in the external database.
   * @param user The user to be updated.
   * @returns {Promise<User>} A promise that resolves with the updated user.
   */
  update: (user: User) => Promise<User>
}
