
import {type ValueType,type TextMediaType,type QuestionType,type Status, } from './enums.gen'
import { type DocRef } from '../../general/docref'
import { AuditInfo } from '../../general/auditinfo'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// QuestionContextLocalisation Interface
export interface QuestionContextLocalisation {
  // The ID of the QuestionContextLocalisation
  id: string

  // The audit information on the creation of the QuestionContextLocalisation
  created: AuditInfo

  // The audit information on the modification of the QuestionContextLocalisation
  modified: AuditInfo

  // A list of possible answers for the question
  answer_list: AnswerList[]

  // The default language code
  language_id: string

  // The main category of the question
  main_category: MainCategory

  // The question object
  question: Question

  // The ID of the parent entity for which this is the child document
  question_context_id: string

  // The current status of the question context
  status: Status

  // A list of tags used to identify the question
  tags: Tags[]
}



// Property Interfaces
export interface AnswerList {
    // Indicates whether the answer is correct
      correct: boolean
    // Indicates whether the answer is disabled
      disabled: boolean
    // An optional explanation on why the answer is correct/incorrect
      explanation: string
    // A unique key used to identify the answer, such that answer values and labels can be edited without losing analytical insights
      key: string
    // The label of the answer, to be displayed to the player
      label: string
    // The media file is optional on the Answer object
      media: string
    // The type of content supported by the answer: TextOnly, TextAndMedia, or MediaOnly
      text_media_type: TextMediaType
    // The value of the answer, parsed as text (might be equal to the label, it might not)
      value: string
    // The true value type of the answer, can be used in Estimation or TrueFalse questions for example. Additionally, we could add types like Percentage or Range and parse the string Value to get the values needed to check if the answer is correct
      value_type: ValueType
}
export interface MainCategory {
    // A unique identifier that is equal across localizations
      id: string
    // The localized label for the main category
      label: string
}
export interface Question {
    // An optional further explanation of the question line
      explanation: string
    // The question line, basically the question itself
      line: string
    // DocumentReference to the media associated with the question
      media: DocRef
    // The type of content supported by the question: TextOnly, TextAndMedia, or MediaOnly
      text_media_type: TextMediaType
    // The type of the question: MultipleChoice, TrueFalse, or Estimation
      type: QuestionType
}
export interface Tags {
    // A unique identifier that is equal across localizations
      id: string
    // The localized label for the tag
      label: string
}
