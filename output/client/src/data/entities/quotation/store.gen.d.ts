import { type Quotation } from './entity'
import { type Store } from 'pinia'


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the quotation store.
 */
export interface QuotationStoreState {
  /**
   * The currently active quotation ID
   */
  activeID: string | null

  /**
   * A cache of quotations.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of quotations.
   */
  list: Quotation[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an QuotationStore that extends the Store interface.
 */
export interface QuotationStore extends QuotationStoreState, Store {
  /**
   * Fire a form update event for the Quotation.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all Quotation.
   */
  emitStoreUpdateEvent: () => void

  /**
   * The currently active quotation
   */
  active: Quotation

  /**
   * Adds an quotation to the local QuotationStore.
   * @param quotation The quotation to be added.
   */
  add: (quotation: Quotation) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Deletes an quotation from the QuotationStore from the external database.
   * @param quotation The quotation to be deleted.
   * @returns {Promise<void>} A promise that resolves when the quotation is deleted.
   */
  delete: (quotation: Quotation) => Promise<void>

  /**
   * Deletes an quotation by ID from the QuotationStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the quotation is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Get a Quotation from the local QuotationStore.
   * @returns { Quotation | null } The quotation.
   */
  get: (id: string) => Quotation | null

  /**
   * Reinserts an quotation to the QuotationStore list.
   * @param quotation The quotation to be reinserted.
   * @returns {void}
   */
  reinsert: (quotation: Quotation) => void

  /**
   * Removes an quotation from the local QuotationStore.
   * @param quotation The quotation to be removed.
   * @returns {void}
   */
  remove: (quotation: Quotation) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single Quotation from either the local QuotationStore or external source, if forced or required.
    * @param id The ID of the Quotation to retrieve.
    * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves when the quotation is set as active.
   */
  retrieve: (id: string, force?: boolean) => Promise<Quotation>

  /**
   * Retrieves all quotations from the QuotationStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves with an array of quotations.
   */
  retrieveAll: (force?: boolean) => Promise<{
    active: string | null
    items: Quotation[]
  }>

  /**
    * Retrieves quotations paginated from the external source
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of quotations.
    */
  retrievePaginated: (pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Quotation[]
  }>

  /**
    * Queries quotations from the external source
    * @param queries The queries to be used for filtering.
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of quotations.
    */
  query: (queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Quotation[]
  }>

  /**
   * Update an quotation from the QuotationStore in the external database.
   * @param quotation The quotation to be updated.
   * @param connect Indicates whether the quotation should be connected to the user on update.
   * @returns {Promise<string>} A promise that resolves to the ID as a string when the quotation is updated.
   */
  update: (quotation: Quotation) => Promise<string>

  /**
    * Searches for quotations in the external source.
    * @param query The query to be used for searching.
    * @returns {Promise<void>} A promise that resolves with an array of quotations.
    */
  search: (query: string, pagination: Pagination, force?: boolean) => Promise<Quotation[]>
}
