import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IProductDto, IExamination, IMargins, ProductStatus,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const ProductStatusValues: Record<string,ProductStatus> = Object.freeze({
  CONCEPT: 'concept',
  READY: 'ready',
})

export class ProductDto extends Dto implements IProductDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/product/{id}'
  _reference = '/Product/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    attributeMap = {} satisfies Record<string, any>
    
    
    attributes = [] as string[]
    
    
    categories = [] as string[]
    
    
    configurablePrice = false
    
    
    examination: IExamination = {
      priority: false,
      priorityScore: 0,
      properties: {} satisfies Record<string, any>,
      timeout: 0,
    }

    
    
    examine = false
    
    
    family = ""
    
    
    _kind = "Product"
    
    
    margin = new margin.Margin()
    
    
    margins: IMargins = {
      direct: new margin.Margin(),
      premium: new margin.Margin(),
      standard: new margin.Margin(),
    }

    
    
    name = ""
    
    
    options = [] as string[]
    
    
    priceConfigurationsGenerated = false
    
    
    priceConfigurationGeneratedTimestamp = 0
    
    
    priceLayerIds = [] as string[]
    
    
    priceLayers: price_layer.PriceLayer[] = []
    
    
    properties = {} satisfies Record<string, any>
    
    
    sku = ""
    
    
    status = ProductStatusValues.concept
    
    
    statusIndex = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): ProductDto {
    // Create a new instance of the class
    const obj = new ProductDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): ProductDto[] {
    return data.map((item) => ProductDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.attributeMap !== undefined && data.attributeMap !== null ) {
      this.attributeMap = data.attributeMap as Record<string, any> ?? this.attributeMap
      
    }
    if (data.attributes !== undefined && data.attributes !== null ) {
      this.attributes = data.attributes as string[] ?? this.attributes
      
    }
    if (data.categories !== undefined && data.categories !== null ) {
      this.categories = data.categories as string[] ?? this.categories
      
    }
    if (data.configurablePrice !== undefined && data.configurablePrice !== null ) {
      this.configurablePrice = data.configurablePrice as boolean ?? this.configurablePrice
      
    }
    if (data.examination !== undefined && data.examination !== null ) {
      if (data.examination) {
        this.examination = Examination.FromJSON(data.examination)
      }
    }
    if (data.examine !== undefined && data.examine !== null ) {
      this.examine = data.examine as boolean ?? this.examine
      
    }
    if (data.family !== undefined && data.family !== null ) {
      this.family = data.family as string ?? this.family
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.margin !== undefined && data.margin !== null ) {
      if (!this.margin) {
        this.margin = new margin.Margin()
      }
      this.margin.set(data.margin as JSONData ?? this.margin.toJSON())
    }
    if (data.margins !== undefined && data.margins !== null ) {
      if (data.margins) {
        this.margins = Margins.FromJSON(data.margins)
      }
    }
    if (data.name !== undefined && data.name !== null ) {
      this.name = data.name as string ?? this.name
      
    }
    if (data.options !== undefined && data.options !== null ) {
      this.options = data.options as string[] ?? this.options
      
    }
    if (data.priceConfigurationsGenerated !== undefined && data.priceConfigurationsGenerated !== null ) {
      this.priceConfigurationsGenerated = data.priceConfigurationsGenerated as boolean ?? this.priceConfigurationsGenerated
      
    }
    if (data.priceConfigurationGeneratedTimestamp !== undefined && data.priceConfigurationGeneratedTimestamp !== null ) {
      this.priceConfigurationGeneratedTimestamp = data.priceConfigurationGeneratedTimestamp as number ?? this.priceConfigurationGeneratedTimestamp
      
    }
    if (data.priceLayerIds !== undefined && data.priceLayerIds !== null ) {
      this.priceLayerIds = data.priceLayerIds as string[] ?? this.priceLayerIds
      
    }
    if (data.priceLayers !== undefined && data.priceLayers !== null && Array.isArray(data.priceLayers)) {
      this.priceLayers = price_layer.PriceLayer.FromJSONArray(data.priceLayers as JSONData[])
    }
    if (data.properties !== undefined && data.properties !== null ) {
      this.properties = data.properties as Record<string, any> ?? this.properties
      
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
    if (data.status !== undefined && data.status !== null ) {
        this.status = ProductStatusValues[(data?.status as string)?.toUpperCase() ?? this.status.toUpperCase()]
    }
    if (data.statusIndex !== undefined && data.statusIndex !== null ) {
      this.statusIndex = data.statusIndex as number ?? this.statusIndex
      
    }
  }

}

export class Examination implements IExamination {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      priority = false
    
    
      priorityScore = 0
    
    
      properties = {} satisfies Record<string, any>
    
    
      timeout = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Examination {
    // Create a new instance of the class
    const obj = new Examination()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Examination[] {
    return data.map((item) => Examination.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.priority !== undefined && data.priority !== null ) {
      this.priority = data.priority as boolean ?? this.priority
      
    }
    if (data.priorityScore !== undefined && data.priorityScore !== null ) {
      this.priorityScore = data.priorityScore as number ?? this.priorityScore
      
    }
    if (data.properties !== undefined && data.properties !== null ) {
      this.properties = data.properties as Record<string, any> ?? this.properties
      
    }
    if (data.timeout !== undefined && data.timeout !== null ) {
      this.timeout = data.timeout as number ?? this.timeout
      
    }
  }
}

export class Margins implements IMargins {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      direct = new margin.Margin()
    
    
      premium = new margin.Margin()
    
    
      standard = new margin.Margin()
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Margins {
    // Create a new instance of the class
    const obj = new Margins()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Margins[] {
    return data.map((item) => Margins.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.direct !== undefined && data.direct !== null ) {
      if (!this.direct) {
        this.direct = new margin.Margin()
      }
      this.direct.set(data.direct as JSONData ?? this.direct.toJSON())
    }
    if (data.premium !== undefined && data.premium !== null ) {
      if (!this.premium) {
        this.premium = new margin.Margin()
      }
      this.premium.set(data.premium as JSONData ?? this.premium.toJSON())
    }
    if (data.standard !== undefined && data.standard !== null ) {
      if (!this.standard) {
        this.standard = new margin.Margin()
      }
      this.standard.set(data.standard as JSONData ?? this.standard.toJSON())
    }
  }
}
