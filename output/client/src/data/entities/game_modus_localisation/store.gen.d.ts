import { type GameModusLocalisation } from './interface.gen'
import { type Store } from 'pinia'
import { Pagination } from "../../general/pagination"
import { Query } from "../../general/query"

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the gameModusLocalisation store.
 */
export interface GameModusLocalisationStoreState {
  /**
   * The currently active gameModusLocalisation ID
   */
  activeID: string | null

  /**
   * A cache of gameModusLocalisations.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of gameModusLocalisations.
   */
  list: GameModusLocalisation[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an GameModusLocalisationStore that extends the Store interface.
 */
export interface GameModusLocalisationStore extends GameModusLocalisationStoreState, Store {
  /**
   * The currently active gameModusLocalisation
   */
  active: GameModusLocalisation | null

  /**
   * Adds an gameModusLocalisation to the local GameModusLocalisationStore.
   * @param gameModusLocalisation The gameModusLocalisation to be added.
   */
  add: (gameModusLocalisation: GameModusLocalisation) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Creates a new gameModusLocalisation in the external database and updates the store.
   * @param gameModusLocalisation The gameModusLocalisation to be created.
   * @returns {Promise<GameModusLocalisation>} A promise that resolves with the created gameModusLocalisation.
   */
  create: (gameModusId: string, gameModusLocalisation: GameModusLocalisation) => Promise<GameModusLocalisation>

  /**
   * Deletes an gameModusLocalisation from the GameModusLocalisationStore from the external database.
   * @param gameModusLocalisation The gameModusLocalisation to be deleted.
   * @returns {Promise<void>} A promise that resolves when the gameModusLocalisation is deleted.
   */
  delete: (gameModusLocalisation: GameModusLocalisation) => Promise<void>

  /**
   * Deletes an gameModusLocalisation by ID from the GameModusLocalisationStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the gameModusLocalisation is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Fire a form update event for the GameModusLocalisation.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all GameModusLocalisations.
   */
  emitStoreUpdateEvent: () => void

  /**
   * Get a GameModusLocalisation from the local GameModusLocalisationStore.
   * @returns { GameModusLocalisation | null } The gameModusLocalisation.
   */
  get: (id: string) => GameModusLocalisation | null

  /**
   * Queries gameModusLocalisations from the external source
   * @param queries The queries to be used for filtering.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: GameModusLocalisation[] }>} A promise that resolves with queried gameModusLocalisations.
   */
  query: (gameModusId: string, queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: GameModusLocalisation[]
  }>

  /**
   * Reinserts an gameModusLocalisation to the GameModusLocalisationStore list.
   * @param gameModusLocalisation The gameModusLocalisation to be reinserted.
   * @returns {void}
   */
  reinsert: (gameModusLocalisation: GameModusLocalisation) => void

  /**
   * Removes an gameModusLocalisation from the local GameModusLocalisationStore.
   * @param gameModusLocalisation The gameModusLocalisation to be removed.
   * @returns {void}
   */
  remove: ({ id }: GameModusLocalisation) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single GameModusLocalisation from either the local GameModusLocalisationStore or external source, if forced or required.
   * @param id The ID of the GameModusLocalisation to retrieve.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<GameModusLocalisation>} A promise that resolves when the gameModusLocalisation is set as active.
   */
  retrieve: (gameModusId: string, id: string, force?: boolean) => Promise<GameModusLocalisation>

  /**
   * Retrieves all gameModusLocalisations from the GameModusLocalisationStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<{ active: string | null; items: GameModusLocalisation[] }>} A promise that resolves with an array of gameModusLocalisations.
   */
  retrieveAll: (gameModusId: string, force?: boolean) => Promise<{
    active: string | null
    items: GameModusLocalisation[]
  }>

  /**
   * Retrieves gameModusLocalisations paginated from the external source.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: GameModusLocalisation[] }>} A promise that resolves with paginated gameModusLocalisations.
   */
  retrievePaginated: (gameModusId: string, pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: GameModusLocalisation[]
  }>

  /**
   * Searches for gameModusLocalisations in the external source.
   * @param search The search query string.
   * @param pagination The pagination to be used for the search.
   * @param force Whether to force the search to the external source.
   * @returns {Promise<{ pagination: Pagination; items: GameModusLocalisation[] }>} A promise that resolves with search results.
   */
  search: (gameModusId: string, search: string, pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: GameModusLocalisation[]
  }>

  /**
   * Update an gameModusLocalisation from the GameModusLocalisationStore in the external database.
   * @param gameModusLocalisation The gameModusLocalisation to be updated.
   * @returns {Promise<GameModusLocalisation>} A promise that resolves with the updated gameModusLocalisation.
   */
  update: (gameModusLocalisation: GameModusLocalisation) => Promise<GameModusLocalisation>
}
