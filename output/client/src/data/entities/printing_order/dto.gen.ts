import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IPrintingOrderDto, ICorrespondence, ICustomerAddress, IFiles, IProductOptions, IStatusLog, PrintingOrderCorrespondenceTemplateKey, PrintingOrderStatus,  } from './dto.gen.d'
import { Media } from '../media'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const PrintingOrderCorrespondenceTemplateKeyValues: Record<string,PrintingOrderCorrespondenceTemplateKey> = Object.freeze({
  CUSTOMER_APPROVE_SAMPLE: 'CUSTOMER_APPROVE_SAMPLE',
  CUSTOMER_PRINTING_ORDER_RECEIVED: 'CUSTOMER_PRINTING_ORDER_RECEIVED',
  CUSTOMER_TRACK_AND_TRACE: 'CUSTOMER_TRACK_AND_TRACE',
  SUPPLIER_PRINTING_ORDER_RECEIVED: 'SUPPLIER_PRINTING_ORDER_RECEIVED',
  SUPPLIER_SAMPLE_ACCEPTED: 'SUPPLIER_SAMPLE_ACCEPTED',
  SUPPLIER_SAMPLE_REJECTED: 'SUPPLIER_SAMPLE_REJECTED',
})
export const PrintingOrderStatusValues: Record<string,PrintingOrderStatus> = Object.freeze({
  NEW: 'new',
  WAITING_FOR_SAMPLE: 'waiting_for_sample',
  WAITING_FOR_APPROVAL: 'waiting_for_approval',
  SAMPLE_REJECTED: 'sample_rejected',
  IN_PRODUCTION: 'in_production',
  SHIPPED: 'shipped',
})

export class PrintingOrderDto extends Dto implements IPrintingOrderDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/printing_order/{id}'
  _reference = '/PrintingOrder/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    approved = false
    
    
    approvedTimestamp = 0
    
    
    artworkApproved = false
    
    
    artworkIsUrl = false
    
    
    autoCorrespondence = true
    
    
    companyName = ""
    
    
    correspondence: ICorrespondence[] = []

    
    
    customerAddress: ICustomerAddress = {
      city: "",
      country: "NL",
      line: "",
      postalCode: "",
    }

    
    
    customerEmail = ""
    
    
    customerName = ""
    
    
    description = ""
    
    
    emailCode = ""
    
    
    files: IFiles = {
      artwork: new Media(),
      media: new Media(),
      orderConfirmation: new Media(),
    }

    
    
    isAirtableOrder = false
    
    
    itemIndex = 0
    
    
    _kind = "PrintingOrder"
    
    
    notes = ""
    
    
    numberOfUnits = 0
    
    
    orderNumber = ""
    
    
    orderStatus = ""
    
    
    productOptions: IProductOptions[] = []

    
    
    quantity = 0
    
    
    quantityOrdered = 0
    
    
    rejected = false
    
    
    rejectionReason = ""
    
    
    sku = ""
    
    
    status = PrintingOrderStatusValues.new
    
    
    statusIndex = 0
    
    
    statusLog: IStatusLog[] = []

    
    
    supplierContactName = ""
    
    
    supplierId = ""
    
    
    supplierName = ""
    
    
    supplierReference = ""
    
    
    trackingUrl = ""
    
    
    trackingUrlApproved = false
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): PrintingOrderDto {
    // Create a new instance of the class
    const obj = new PrintingOrderDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): PrintingOrderDto[] {
    return data.map((item) => PrintingOrderDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.approved !== undefined && data.approved !== null ) {
      this.approved = data.approved as boolean ?? this.approved
      
    }
    if (data.approvedTimestamp !== undefined && data.approvedTimestamp !== null ) {
      this.approvedTimestamp = data.approvedTimestamp as number ?? this.approvedTimestamp
      
    }
    if (data.artworkApproved !== undefined && data.artworkApproved !== null ) {
      this.artworkApproved = data.artworkApproved as boolean ?? this.artworkApproved
      
    }
    if (data.artworkIsUrl !== undefined && data.artworkIsUrl !== null ) {
      this.artworkIsUrl = data.artworkIsUrl as boolean ?? this.artworkIsUrl
      
    }
    if (data.autoCorrespondence !== undefined && data.autoCorrespondence !== null ) {
      this.autoCorrespondence = data.autoCorrespondence as boolean ?? this.autoCorrespondence
      
    }
    if (data.companyName !== undefined && data.companyName !== null ) {
      this.companyName = data.companyName as string ?? this.companyName
      
    }
    if (data.correspondence !== undefined && data.correspondence !== null && Array.isArray(data.correspondence)) {
      if (data.correspondence) {
        this.correspondence = Correspondence.FromJSONArray(data.correspondence as JSONData[])
      }
    }
    if (data.customerAddress !== undefined && data.customerAddress !== null ) {
      if (data.customerAddress) {
        this.customerAddress = CustomerAddress.FromJSON(data.customerAddress)
      }
    }
    if (data.customerEmail !== undefined && data.customerEmail !== null ) {
      this.customerEmail = data.customerEmail as string ?? this.customerEmail
      
    }
    if (data.customerName !== undefined && data.customerName !== null ) {
      this.customerName = data.customerName as string ?? this.customerName
      
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.emailCode !== undefined && data.emailCode !== null ) {
      this.emailCode = data.emailCode as string ?? this.emailCode
      
    }
    if (data.files !== undefined && data.files !== null ) {
      if (data.files) {
        this.files = Files.FromJSON(data.files)
      }
    }
    if (data.isAirtableOrder !== undefined && data.isAirtableOrder !== null ) {
      this.isAirtableOrder = data.isAirtableOrder as boolean ?? this.isAirtableOrder
      
    }
    if (data.itemIndex !== undefined && data.itemIndex !== null ) {
      this.itemIndex = data.itemIndex as number ?? this.itemIndex
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.notes !== undefined && data.notes !== null ) {
      this.notes = data.notes as string ?? this.notes
      
    }
    if (data.numberOfUnits !== undefined && data.numberOfUnits !== null ) {
      this.numberOfUnits = data.numberOfUnits as number ?? this.numberOfUnits
      
    }
    if (data.orderNumber !== undefined && data.orderNumber !== null ) {
      this.orderNumber = data.orderNumber as string ?? this.orderNumber
      
    }
    if (data.orderStatus !== undefined && data.orderStatus !== null ) {
      this.orderStatus = data.orderStatus as string ?? this.orderStatus
      
    }
    if (data.productOptions !== undefined && data.productOptions !== null && Array.isArray(data.productOptions)) {
      if (data.productOptions) {
        this.productOptions = ProductOptions.FromJSONArray(data.productOptions as JSONData[])
      }
    }
    if (data.quantity !== undefined && data.quantity !== null ) {
      this.quantity = data.quantity as number ?? this.quantity
      
    }
    if (data.quantityOrdered !== undefined && data.quantityOrdered !== null ) {
      this.quantityOrdered = data.quantityOrdered as number ?? this.quantityOrdered
      
    }
    if (data.rejected !== undefined && data.rejected !== null ) {
      this.rejected = data.rejected as boolean ?? this.rejected
      
    }
    if (data.rejectionReason !== undefined && data.rejectionReason !== null ) {
      this.rejectionReason = data.rejectionReason as string ?? this.rejectionReason
      
    }
    if (data.sku !== undefined && data.sku !== null ) {
      this.sku = data.sku as string ?? this.sku
      
    }
    if (data.status !== undefined && data.status !== null ) {
        this.status = PrintingOrderStatusValues[(data?.status as string)?.toUpperCase() ?? this.status.toUpperCase()]
    }
    if (data.statusIndex !== undefined && data.statusIndex !== null ) {
      this.statusIndex = data.statusIndex as number ?? this.statusIndex
      
    }
    if (data.statusLog !== undefined && data.statusLog !== null && Array.isArray(data.statusLog)) {
      if (data.statusLog) {
        this.statusLog = StatusLog.FromJSONArray(data.statusLog as JSONData[])
      }
    }
    if (data.supplierContactName !== undefined && data.supplierContactName !== null ) {
      this.supplierContactName = data.supplierContactName as string ?? this.supplierContactName
      
    }
    if (data.supplierId !== undefined && data.supplierId !== null ) {
      this.supplierId = data.supplierId as string ?? this.supplierId
      
    }
    if (data.supplierName !== undefined && data.supplierName !== null ) {
      this.supplierName = data.supplierName as string ?? this.supplierName
      
    }
    if (data.supplierReference !== undefined && data.supplierReference !== null ) {
      this.supplierReference = data.supplierReference as string ?? this.supplierReference
      
    }
    if (data.trackingUrl !== undefined && data.trackingUrl !== null ) {
      this.trackingUrl = data.trackingUrl as string ?? this.trackingUrl
      
    }
    if (data.trackingUrlApproved !== undefined && data.trackingUrlApproved !== null ) {
      this.trackingUrlApproved = data.trackingUrlApproved as boolean ?? this.trackingUrlApproved
      
    }
  }

}

export class Correspondence implements ICorrespondence {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      id = ""
    
    
      key = PrintingOrderCorrespondenceTemplateKeyValues.CUSTOMER_APPROVE_SAMPLE
    
    
      sent = false
    
    
      sentAt = 0
    
    
      statusLogIndex = 0
    
    
      timestamp = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Correspondence {
    // Create a new instance of the class
    const obj = new Correspondence()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Correspondence[] {
    return data.map((item) => Correspondence.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.id !== undefined && data.id !== null ) {
      this.id = data.id as string ?? this.id
      
    }
    if (data.key !== undefined && data.key !== null ) {
        this.key = PrintingOrderCorrespondenceTemplateKeyValues[(data?.key as string)?.toUpperCase() ?? this.key.toUpperCase()]
    }
    if (data.sent !== undefined && data.sent !== null ) {
      this.sent = data.sent as boolean ?? this.sent
      
    }
    if (data.sentAt !== undefined && data.sentAt !== null ) {
      this.sentAt = data.sentAt as number ?? this.sentAt
      
    }
    if (data.statusLogIndex !== undefined && data.statusLogIndex !== null ) {
      this.statusLogIndex = data.statusLogIndex as number ?? this.statusLogIndex
      
    }
    if (data.timestamp !== undefined && data.timestamp !== null ) {
      this.timestamp = data.timestamp as number ?? this.timestamp
      
    }
  }
}

export class CustomerAddress implements ICustomerAddress {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      city = ""
    
    
      country = "NL"
    
    
      line = ""
    
    
      postalCode = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): CustomerAddress {
    // Create a new instance of the class
    const obj = new CustomerAddress()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): CustomerAddress[] {
    return data.map((item) => CustomerAddress.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.city !== undefined && data.city !== null ) {
      this.city = data.city as string ?? this.city
      
    }
    if (data.country !== undefined && data.country !== null ) {
      this.country = data.country as string ?? this.country
      
    }
    if (data.line !== undefined && data.line !== null ) {
      this.line = data.line as string ?? this.line
      
    }
    if (data.postalCode !== undefined && data.postalCode !== null ) {
      this.postalCode = data.postalCode as string ?? this.postalCode
      
    }
  }
}

export class Files implements IFiles {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      artwork = new Media()
    
    
      media = new Media()
    
    
      orderConfirmation = new Media()
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Files {
    // Create a new instance of the class
    const obj = new Files()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Files[] {
    return data.map((item) => Files.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.artwork !== undefined && data.artwork !== null ) {
      if (!this.artwork) {
        this.artwork = new Media()
      }
      this.artwork.set(data.artwork as JSONData ?? this.artwork.toJSON())
    }
    if (data.media !== undefined && data.media !== null ) {
      if (!this.media) {
        this.media = new Media()
      }
      this.media.set(data.media as JSONData ?? this.media.toJSON())
    }
    if (data.orderConfirmation !== undefined && data.orderConfirmation !== null ) {
      if (!this.orderConfirmation) {
        this.orderConfirmation = new Media()
      }
      this.orderConfirmation.set(data.orderConfirmation as JSONData ?? this.orderConfirmation.toJSON())
    }
  }
}

export class ProductOptions implements IProductOptions {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      id = ""
    
    
      key = ""
    
    
      value = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): ProductOptions {
    // Create a new instance of the class
    const obj = new ProductOptions()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): ProductOptions[] {
    return data.map((item) => ProductOptions.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.id !== undefined && data.id !== null ) {
      this.id = data.id as string ?? this.id
      
    }
    if (data.key !== undefined && data.key !== null ) {
      this.key = data.key as string ?? this.key
      
    }
    if (data.value !== undefined && data.value !== null ) {
      this.value = data.value as string ?? this.value
      
    }
  }
}

export class StatusLog implements IStatusLog {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      prevStatus = PrintingOrderStatusValues.new
    
    
      status = PrintingOrderStatusValues.new
    
    
      timestamp = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): StatusLog {
    // Create a new instance of the class
    const obj = new StatusLog()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): StatusLog[] {
    return data.map((item) => StatusLog.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.prevStatus !== undefined && data.prevStatus !== null ) {
        this.prevStatus = PrintingOrderStatusValues[(data?.prevStatus as string)?.toUpperCase() ?? this.prevStatus.toUpperCase()]
    }
    if (data.status !== undefined && data.status !== null ) {
        this.status = PrintingOrderStatusValues[(data?.status as string)?.toUpperCase() ?? this.status.toUpperCase()]
    }
    if (data.timestamp !== undefined && data.timestamp !== null ) {
      this.timestamp = data.timestamp as number ?? this.timestamp
      
    }
  }
}
