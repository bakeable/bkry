import { type Author } from './interface.gen'
import { type Store } from 'pinia'
import { Pagination } from "../../general/pagination"
import { Query } from "../../general/query"

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the author store.
 */
export interface AuthorStoreState {
  /**
   * The currently active author ID
   */
  activeID: string | null

  /**
   * A cache of authors.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of authors.
   */
  list: Author[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an AuthorStore that extends the Store interface.
 */
export interface AuthorStore extends AuthorStoreState, Store {
  /**
   * The currently active author
   */
  active: Author | null

  /**
   * Adds an author to the local AuthorStore.
   * @param author The author to be added.
   */
  add: (author: Author) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Creates a new author in the external database and updates the store.
   * @param author The author to be created.
   * @returns {Promise<Author>} A promise that resolves with the created author.
   */
  create: (author: Author) => Promise<Author>

  /**
   * Deletes an author from the AuthorStore from the external database.
   * @param author The author to be deleted.
   * @returns {Promise<void>} A promise that resolves when the author is deleted.
   */
  delete: (author: Author) => Promise<void>

  /**
   * Deletes an author by ID from the AuthorStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the author is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Fire a form update event for the Author.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all Authors.
   */
  emitStoreUpdateEvent: () => void

  /**
   * Get a Author from the local AuthorStore.
   * @returns { Author | null } The author.
   */
  get: (id: string) => Author | null

  /**
   * Queries authors from the external source
   * @param queries The queries to be used for filtering.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: Author[] }>} A promise that resolves with queried authors.
   */
  query: (queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Author[]
  }>

  /**
   * Reinserts an author to the AuthorStore list.
   * @param author The author to be reinserted.
   * @returns {void}
   */
  reinsert: (author: Author) => void

  /**
   * Removes an author from the local AuthorStore.
   * @param author The author to be removed.
   * @returns {void}
   */
  remove: ({ id }: Author) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single Author from either the local AuthorStore or external source, if forced or required.
   * @param id The ID of the Author to retrieve.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<Author>} A promise that resolves when the author is set as active.
   */
  retrieve: (id: string, force?: boolean) => Promise<Author>

  /**
   * Retrieves all authors from the AuthorStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<{ active: string | null; items: Author[] }>} A promise that resolves with an array of authors.
   */
  retrieveAll: (force?: boolean) => Promise<{
    active: string | null
    items: Author[]
  }>

  /**
   * Retrieves authors paginated from the external source.
   * @param pagination The pagination to be used for the query.
   * @param force Whether to force the query to the external source.
   * @returns {Promise<{ pagination: Pagination; items: Author[] }>} A promise that resolves with paginated authors.
   */
  retrievePaginated: (pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Author[]
  }>

  /**
   * Searches for authors in the external source.
   * @param search The search query string.
   * @param pagination The pagination to be used for the search.
   * @param force Whether to force the search to the external source.
   * @returns {Promise<{ pagination: Pagination; items: Author[] }>} A promise that resolves with search results.
   */
  search: (search: string, pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Author[]
  }>

  /**
   * Update an author from the AuthorStore in the external database.
   * @param author The author to be updated.
   * @returns {Promise<Author>} A promise that resolves with the updated author.
   */
  update: (author: Author) => Promise<Author>
}
