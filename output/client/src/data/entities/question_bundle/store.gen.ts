import { defineStore } from 'pinia'
import { QuestionBundle } from './interface.gen'
import type { QuestionBundleStore, QuestionBundleStoreState } from './store.gen.d'
import { Pagination, paginationAndQueriesToCacheKey } from "../../general/pagination";
import { Query } from "../../general/query";
import { QuestionBundleTransporter } from './transport.gen'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

export const useQuestionBundleStore = defineStore('questionBundleStore', {
  state: (): QuestionBundleStoreState => ({
    activeID: null,
    cache: {},
    list: [] as QuestionBundle[],
    retrievalTimestamp: 0,
    updateKey: 0,
    storeUpdateTimeout: null,
  }),
  actions: {
    emitFormUpdateEvent(id: string): void {
      window.dispatchEvent(new CustomEvent("form.update.question_bundle", { detail: { id } }));
    },
    emitStoreUpdateEvent(): void {
      // Clear existing timeout
      if (this.storeUpdateTimeout !== null) {
        clearTimeout(this.storeUpdateTimeout)
      }

      // Set new timeout
      this.storeUpdateTimeout = setTimeout(() => {
        window.dispatchEvent(new CustomEvent("store.update.question_bundle"));
        this.storeUpdateTimeout = null
      }, 1500)
    },
    async activate(questionBundle: QuestionBundle): Promise<void> {
      // Set active
      this.activeID = questionBundle.id
    },
    add(questionBundle: QuestionBundle): void {
      const id = questionBundle.id
      if (typeof id === 'string' && !this.contains(id)) {
        this.list.push(questionBundle)

        // Set active
        if (this.active === null) {
          this.activeID = questionBundle.id
        }
      } else {
        this.reinsert(questionBundle)
      }
      this.updateKey += 1;
    },
    async delete(questionBundle: QuestionBundle): Promise<void> {
      await QuestionBundleTransporter.Delete(questionBundle).then(() => {
        this.remove(questionBundle)
      }).finally(() => {
        this.emitStoreUpdateEvent()
      });
    },
    async deleteById(id: string): Promise<void> {
      const questionBundle = (this.list as QuestionBundle[]).find((x: QuestionBundle) => x.id === id)
      if (questionBundle !== undefined) {
        await this.delete(questionBundle)
      } else {
        throw new Error('Could not find QuestionBundle with id: ' + id)
      }
    },
    contains(id: string): boolean {
      return (this.list as QuestionBundle[]).some((x: QuestionBundle) => x.id === id)
    },
    async create(questionBundle: QuestionBundle): Promise<QuestionBundle> {
      // Create questionBundle
      const item = await QuestionBundleTransporter.Create({
      }, questionBundle)

      // Reinsert questionBundle
      this.reinsert(item)

      // Activate questionBundle
      if (this.active === null) {
        await this.activate(item)
      }
      
      this.emitStoreUpdateEvent()

      return item
    },
    get(id: string): QuestionBundle | null {
      return (this.list as QuestionBundle[]).find((x: QuestionBundle) => x.id === id) || null
    },
    reinsert(questionBundle: QuestionBundle): void {
      const index = (this.list as QuestionBundle[]).findIndex((x: QuestionBundle) => x.id === questionBundle.id)
      if (index !== -1) {
        this.list = [
          ...this.list.slice(0, index),
          questionBundle,
          ...this.list.slice(index + 1),
        ]
      } else {
        this.add(questionBundle)
      }
      this.updateKey += 1;
    },
    remove({ id }: QuestionBundle): void {
      const index = (this.list as QuestionBundle[]).findIndex((x: QuestionBundle) => x.id === id)
      if (index !== -1) {
        this.list = [
          ...this.list.slice(0, index),
          ...this.list.slice(index + 1),
        ]
      }
      this.updateKey += 1;
    },
    async retrieve(id: string, force = false): Promise<QuestionBundle> {
      // Check if a refresh is required
      if (!force && !this.refreshRequired) {
        const questionBundle = this.get(id)
        if (questionBundle !== null) {
          return questionBundle
        }
      }

      // Get questionBundle
      const questionBundle = await QuestionBundleTransporter.Get({
        id,
      }).then(async (entity) => {
        this.reinsert(entity)

        // Activate questionBundle
        await this.activate(entity)

        return entity
      })

      return questionBundle
    },
    async retrieveAll(force = false): Promise<{
      active: string | null
      items: QuestionBundle[]
    }> {
      // Check if a refresh is required
      if (!force && !this.refreshRequired) {
        return {
          active: this.activeID,
          items: this.list as QuestionBundle[],
        }
      }

      // Clear list
      while (this.list.length > 0) {
        this.list.pop()
      }

      // Retrieve list
      await QuestionBundleTransporter.GetAll({
      }).then(async (list) => {
        list.forEach((questionBundle) => {
          this.reinsert(questionBundle)
        })

        // Activate questionBundle
        if (list.length > 0) {
          if (this.activeID === null) {
            await this.activate(list[0])
          }
        }
      })

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now()

      return {
        active: this.activeID,
        items: this.list as QuestionBundle[],
      }
    },
    async retrievePaginated(pagination: Pagination, force = false): Promise<{
      pagination: Pagination;
      items: QuestionBundle[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = pagination.toCacheKey();

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          pagination: cached.pagination.deepCopy(),
          items: cached.ids.map((id: string) => this.get(id) as QuestionBundle),
        };
      }

      // Retrieve list
      const items = await QuestionBundleTransporter.GetPaginated(pagination).then(async ({items, pagination }) => {
        items.forEach((questionBundle) => {
          this.reinsert(questionBundle);
        });

        // Set new pagination
        newPagination = pagination.deepCopy();

        return items;
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: QuestionBundle) => x.id),
        pagination: newPagination,
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        pagination: newPagination,
        items,
      };
    },
    async query(pagination: Pagination, queries: Query[], force = false): Promise<{
      pagination: Pagination;
      items: QuestionBundle[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = paginationAndQueriesToCacheKey(pagination, queries);

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          pagination: cached.pagination.deepCopy(),
          items: cached.ids.map((id: string) => this.get(id) as QuestionBundle),
        };
      }

      // Retrieve list
      const items = await QuestionBundleTransporter.Query(
        pagination,
        queries,
      ).then(async ({ items, pagination }) => {
        items.forEach((questionBundle) => {
          this.reinsert(questionBundle);
        });

        // Set new pagination
        newPagination = pagination.deepCopy();;

        return items
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: QuestionBundle) => x.id),
        pagination: newPagination.deepCopy(),
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        pagination: newPagination,
        items: items,
      };
    },
    async search(
      
      pagination: Pagination,
      search: string,
      force = false,
    ): Promise<{
      pagination: Pagination;
      items: QuestionBundle[];
    }> {
      // Check pagination
      let newPagination = new Pagination(pagination).deepCopy();

      // Get cachekey
      const cacheKey = search.replaceAll(" ", "_") + '-' + pagination.toCacheKey();

      // Check if a refresh is required
      if (!force && this.cache[cacheKey]) {
        const cached = this.cache[cacheKey]
        return {
          items: cached.ids.map(
            (id: string) => this.get(id) as QuestionBundle,
          ),
          pagination: cached.pagination.deepCopy(),
        };
      }

      // Retrieve list
      const items = await QuestionBundleTransporter.Search(
        pagination,
        search,
      ).then(async ({ items, pagination }) => {
        items.forEach((questionBundle) => {
          this.reinsert(questionBundle);
        });

        // Set new pagination
        newPagination = pagination.deepCopy();;

        return items
      });

      // Set cache
      this.cache[cacheKey] = {
        ids: items.map((x: QuestionBundle) => x.id),
        pagination: newPagination.deepCopy(),
        retrievalTimestamp: Date.now(),
      };

      // Set retrieval timestamp
      this.retrievalTimestamp = Date.now();

      return {
        items: items,
        pagination: newPagination,
      };
    },
    async update(questionBundle: QuestionBundle): Promise<QuestionBundle> {
      // Update questionBundle
      const item = await QuestionBundleTransporter.Update(questionBundle)

      // Reinsert questionBundle
      this.reinsert(item)

      // Activate questionBundle
      if (this.active === null) {
        await this.activate(item)
      }
      
      this.emitStoreUpdateEvent()

      return item
    },
  },
  getters: {
    active(): QuestionBundle | null {
      if (this.activeID === null) {
        return null
      }

      const questionBundle = (this.list as QuestionBundle[]).find((x: QuestionBundle) => x.id === this.activeID)
      if (questionBundle === undefined) {
        return null
      }

      return questionBundle
    },
    refreshRequired(): boolean {
      return (
        this.retrievalTimestamp === 0 ||
        this.retrievalTimestamp < Date.now() - 30 * 60000 ||
        this.list.length === 0
      )
    },
  },
})

// Export a function to create a new instance of the store
export function createQuestionBundleStore(): QuestionBundleStore {
  const store = useQuestionBundleStore()
  // Run the initializeStore action when the store is created
  store.initializeStore()
  return store as unknown as QuestionBundleStore // TODO: Fix this
}
