import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IPackingSlipDto, IAddress, ICustomer, IDelivery, IPackages, CarrierCode, PackingSlipStatus,  } from './dto.gen.d'
import { Dimension } from '../dimension'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types
export const CarrierCodeValues: Record<string,CarrierCode> = Object.freeze({
  BRTB: 'BRTB',
  BRT: 'BRT',
  AFH: 'AFH',
  OEG: 'OEG',
})
export const PackingSlipStatusValues: Record<string,PackingSlipStatus> = Object.freeze({
  SHIPMENT_NOT_CREATED: 'shipment_not_created',
  SHIPMENT_CREATED: 'shipment_created',
  SHIPMENT_READY: 'shipment_ready',
})

export class PackingSlipDto extends Dto implements IPackingSlipDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/packing_slip/{id}'
  _reference = '/PackingSlip/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    addedBy = ""
    
    
    address: IAddress = {
      city: "",
      country: "",
      description: "",
      formatted: "",
      houseNumber: "",
      postalCode: "",
      street: "",
    }

    
    
    administration = ""
    
    
    awb = ""
    
    
    carrierCode = CarrierCodeValues.BRT
    
    
    combinedOrderNumbers = [] as string[]
    
    
    combinedPackingSlipIds = [] as string[]
    
    
    companyName = ""
    
    
    customer: ICustomer = {
      email: "",
      name: "",
      phoneNumber: "",
    }

    
    
    date = ""
    
    
    delivery: IDelivery = {
    afterTime: {
      hour: 9,
      minute: 0,
    },
    beforeTime: {
      hour: 17,
      minute: 0,
    },
      date: "",
      notes: "",
    }

    
    
    description = ""
    
    
    incotermCode = ""
    
    
    _kind = "PackingSlip"
    
    
    mainPackingSlipId = ""
    
    
    markedAsCompleted = false
    
    
    markedAsPrinted = false
    
    
    markedAsPushed = false
    
    
    note = ""
    
    
    orderCreatedBy = ""
    
    
    orderNumber = ""
    
    
    orderProcessing = ""
    
    
    originalTotalGrossWeight = 0.0
    
    
    packages: IPackages[] = []

    
    
    promisedDeliveryDate = ""
    
    
    reference = ""
    
    
    service = ""
    
    
    slipNumber = ""
    
    
    status = PackingSlipStatusValues.shipment_not_created
    
    
    statusIndex = 0
    
    
    supplierContactName = ""
    
    
    supplierId = ""
    
    
    supplierName = ""
    
    
    totalAmountExcludingVAT = 0.0
    
    
    totalGrossWeight = 0.0
    
    
    totalQuantity = 0
    
    
    trackingUrl = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): PackingSlipDto {
    // Create a new instance of the class
    const obj = new PackingSlipDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): PackingSlipDto[] {
    return data.map((item) => PackingSlipDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.addedBy !== undefined && data.addedBy !== null ) {
      this.addedBy = data.addedBy as string ?? this.addedBy
      
    }
    if (data.address !== undefined && data.address !== null ) {
      if (data.address) {
        this.address = Address.FromJSON(data.address)
      }
    }
    if (data.administration !== undefined && data.administration !== null ) {
      this.administration = data.administration as string ?? this.administration
      
    }
    if (data.awb !== undefined && data.awb !== null ) {
      this.awb = data.awb as string ?? this.awb
      
    }
    if (data.carrierCode !== undefined && data.carrierCode !== null ) {
        this.carrierCode = CarrierCodeValues[(data?.carrierCode as string)?.toUpperCase() ?? this.carrierCode.toUpperCase()]
    }
    if (data.combinedOrderNumbers !== undefined && data.combinedOrderNumbers !== null ) {
      this.combinedOrderNumbers = data.combinedOrderNumbers as string[] ?? this.combinedOrderNumbers
      
    }
    if (data.combinedPackingSlipIds !== undefined && data.combinedPackingSlipIds !== null ) {
      this.combinedPackingSlipIds = data.combinedPackingSlipIds as string[] ?? this.combinedPackingSlipIds
      
    }
    if (data.companyName !== undefined && data.companyName !== null ) {
      this.companyName = data.companyName as string ?? this.companyName
      
    }
    if (data.customer !== undefined && data.customer !== null ) {
      if (data.customer) {
        this.customer = Customer.FromJSON(data.customer)
      }
    }
    if (data.date !== undefined && data.date !== null ) {
      this.date = data.date as string ?? this.date
      
    }
    if (data.delivery !== undefined && data.delivery !== null ) {
      if (data.delivery) {
        this.delivery = Delivery.FromJSON(data.delivery)
      }
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.incotermCode !== undefined && data.incotermCode !== null ) {
      this.incotermCode = data.incotermCode as string ?? this.incotermCode
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.mainPackingSlipId !== undefined && data.mainPackingSlipId !== null ) {
      this.mainPackingSlipId = data.mainPackingSlipId as string ?? this.mainPackingSlipId
      
    }
    if (data.markedAsCompleted !== undefined && data.markedAsCompleted !== null ) {
      this.markedAsCompleted = data.markedAsCompleted as boolean ?? this.markedAsCompleted
      
    }
    if (data.markedAsPrinted !== undefined && data.markedAsPrinted !== null ) {
      this.markedAsPrinted = data.markedAsPrinted as boolean ?? this.markedAsPrinted
      
    }
    if (data.markedAsPushed !== undefined && data.markedAsPushed !== null ) {
      this.markedAsPushed = data.markedAsPushed as boolean ?? this.markedAsPushed
      
    }
    if (data.note !== undefined && data.note !== null ) {
      this.note = data.note as string ?? this.note
      
    }
    if (data.orderCreatedBy !== undefined && data.orderCreatedBy !== null ) {
      this.orderCreatedBy = data.orderCreatedBy as string ?? this.orderCreatedBy
      
    }
    if (data.orderNumber !== undefined && data.orderNumber !== null ) {
      this.orderNumber = data.orderNumber as string ?? this.orderNumber
      
    }
    if (data.orderProcessing !== undefined && data.orderProcessing !== null ) {
      this.orderProcessing = data.orderProcessing as string ?? this.orderProcessing
      
    }
    if (data.originalTotalGrossWeight !== undefined && data.originalTotalGrossWeight !== null ) {
      this.originalTotalGrossWeight = data.originalTotalGrossWeight as number ?? this.originalTotalGrossWeight
      
    }
    if (data.packages !== undefined && data.packages !== null && Array.isArray(data.packages)) {
      if (data.packages) {
        this.packages = Packages.FromJSONArray(data.packages as JSONData[])
      }
    }
    if (data.promisedDeliveryDate !== undefined && data.promisedDeliveryDate !== null ) {
      this.promisedDeliveryDate = data.promisedDeliveryDate as string ?? this.promisedDeliveryDate
      
    }
    if (data.reference !== undefined && data.reference !== null ) {
      this.reference = data.reference as string ?? this.reference
      
    }
    if (data.service !== undefined && data.service !== null ) {
      this.service = data.service as string ?? this.service
      
    }
    if (data.slipNumber !== undefined && data.slipNumber !== null ) {
      this.slipNumber = data.slipNumber as string ?? this.slipNumber
      
    }
    if (data.status !== undefined && data.status !== null ) {
        this.status = PackingSlipStatusValues[(data?.status as string)?.toUpperCase() ?? this.status.toUpperCase()]
    }
    if (data.statusIndex !== undefined && data.statusIndex !== null ) {
      this.statusIndex = data.statusIndex as number ?? this.statusIndex
      
    }
    if (data.supplierContactName !== undefined && data.supplierContactName !== null ) {
      this.supplierContactName = data.supplierContactName as string ?? this.supplierContactName
      
    }
    if (data.supplierId !== undefined && data.supplierId !== null ) {
      this.supplierId = data.supplierId as string ?? this.supplierId
      
    }
    if (data.supplierName !== undefined && data.supplierName !== null ) {
      this.supplierName = data.supplierName as string ?? this.supplierName
      
    }
    if (data.totalAmountExcludingVAT !== undefined && data.totalAmountExcludingVAT !== null ) {
      this.totalAmountExcludingVAT = data.totalAmountExcludingVAT as number ?? this.totalAmountExcludingVAT
      
    }
    if (data.totalGrossWeight !== undefined && data.totalGrossWeight !== null ) {
      this.totalGrossWeight = data.totalGrossWeight as number ?? this.totalGrossWeight
      
    }
    if (data.totalQuantity !== undefined && data.totalQuantity !== null ) {
      this.totalQuantity = data.totalQuantity as number ?? this.totalQuantity
      
    }
    if (data.trackingUrl !== undefined && data.trackingUrl !== null ) {
      this.trackingUrl = data.trackingUrl as string ?? this.trackingUrl
      
    }
  }

}

export class Address implements IAddress {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      city = ""
    
    
      country = ""
    
    
      description = ""
    
    
      formatted = ""
    
    
      houseNumber = ""
    
    
      postalCode = ""
    
    
      street = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Address {
    // Create a new instance of the class
    const obj = new Address()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Address[] {
    return data.map((item) => Address.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.city !== undefined && data.city !== null ) {
      this.city = data.city as string ?? this.city
      
    }
    if (data.country !== undefined && data.country !== null ) {
      this.country = data.country as string ?? this.country
      
    }
    if (data.description !== undefined && data.description !== null ) {
      this.description = data.description as string ?? this.description
      
    }
    if (data.formatted !== undefined && data.formatted !== null ) {
      this.formatted = data.formatted as string ?? this.formatted
      
    }
    if (data.houseNumber !== undefined && data.houseNumber !== null ) {
      this.houseNumber = data.houseNumber as string ?? this.houseNumber
      
    }
    if (data.postalCode !== undefined && data.postalCode !== null ) {
      this.postalCode = data.postalCode as string ?? this.postalCode
      
    }
    if (data.street !== undefined && data.street !== null ) {
      this.street = data.street as string ?? this.street
      
    }
  }
}

export class Customer implements ICustomer {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      email = ""
    
    
      name = ""
    
    
      phoneNumber = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Customer {
    // Create a new instance of the class
    const obj = new Customer()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Customer[] {
    return data.map((item) => Customer.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.email !== undefined && data.email !== null ) {
      this.email = data.email as string ?? this.email
      
    }
    if (data.name !== undefined && data.name !== null ) {
      this.name = data.name as string ?? this.name
      
    }
    if (data.phoneNumber !== undefined && data.phoneNumber !== null ) {
      this.phoneNumber = data.phoneNumber as string ?? this.phoneNumber
      
    }
  }
}

export class Delivery implements IDelivery {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      afterTime = new AfterTime()
    
    
      beforeTime = new BeforeTime()
    
    
      date = ""
    
    
      notes = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Delivery {
    // Create a new instance of the class
    const obj = new Delivery()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Delivery[] {
    return data.map((item) => Delivery.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.afterTime !== undefined && data.afterTime !== null ) {
      if (data.afterTime) {
        this.afterTime = AfterTime.FromJSON(data.afterTime)
      }
    }
    if (data.beforeTime !== undefined && data.beforeTime !== null ) {
      if (data.beforeTime) {
        this.beforeTime = BeforeTime.FromJSON(data.beforeTime)
      }
    }
    if (data.date !== undefined && data.date !== null ) {
      this.date = data.date as string ?? this.date
      
    }
    if (data.notes !== undefined && data.notes !== null ) {
      this.notes = data.notes as string ?? this.notes
      
    }
  }
}

export class AfterTime {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      hour = 9
    
    
      minute = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): AfterTime {
    // Create a new instance of the class
    const obj = new AfterTime()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): AfterTime[] {
    return data.map((item) => AfterTime.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.hour !== undefined && data.hour !== null ) {
      this.hour = data.hour as number ?? this.hour
      
    }
    if (data.minute !== undefined && data.minute !== null ) {
      this.minute = data.minute as number ?? this.minute
      
    }
  }
}

export class BeforeTime {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      hour = 17
    
    
      minute = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): BeforeTime {
    // Create a new instance of the class
    const obj = new BeforeTime()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): BeforeTime[] {
    return data.map((item) => BeforeTime.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.hour !== undefined && data.hour !== null ) {
      this.hour = data.hour as number ?? this.hour
      
    }
    if (data.minute !== undefined && data.minute !== null ) {
      this.minute = data.minute as number ?? this.minute
      
    }
  }
}

export class Packages implements IPackages {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      amount = 0
    
    
      dimensions = new Dimensions()
    
    
      transsmartCode = ""
    
    
      type = ""
    
    
      weight = new Dimension()
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Packages {
    // Create a new instance of the class
    const obj = new Packages()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Packages[] {
    return data.map((item) => Packages.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.amount !== undefined && data.amount !== null ) {
      this.amount = data.amount as number ?? this.amount
      
    }
    if (data.dimensions !== undefined && data.dimensions !== null ) {
      if (data.dimensions) {
        this.dimensions = Dimensions.FromJSON(data.dimensions)
      }
    }
    if (data.transsmartCode !== undefined && data.transsmartCode !== null ) {
      this.transsmartCode = data.transsmartCode as string ?? this.transsmartCode
      
    }
    if (data.type !== undefined && data.type !== null ) {
      this.type = data.type as string ?? this.type
      
    }
    if (data.weight !== undefined && data.weight !== null ) {
      if (!this.weight) {
        this.weight = new Dimension()
      }
      this.weight.set(data.weight as JSONData ?? this.weight.toJSON())
    }
  }
}

export class Dimensions {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      height = new Dimension()
    
    
      length = new Dimension()
    
    
      width = new Dimension()
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): Dimensions {
    // Create a new instance of the class
    const obj = new Dimensions()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): Dimensions[] {
    return data.map((item) => Dimensions.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.height !== undefined && data.height !== null ) {
      if (!this.height) {
        this.height = new Dimension()
      }
      this.height.set(data.height as JSONData ?? this.height.toJSON())
    }
    if (data.length !== undefined && data.length !== null ) {
      if (!this.length) {
        this.length = new Dimension()
      }
      this.length.set(data.length as JSONData ?? this.length.toJSON())
    }
    if (data.width !== undefined && data.width !== null ) {
      if (!this.width) {
        this.width = new Dimension()
      }
      this.width.set(data.width as JSONData ?? this.width.toJSON())
    }
  }
}
