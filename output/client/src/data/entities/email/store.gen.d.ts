import { type Email } from './entity'
import { type Store } from 'pinia'


/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// IF YOU WANT TO EDIT THIS FILE, REMOVE THE .gen. FROM THE FILENAME. THE FILE WILL THEN BE IGNORED.
/// ///////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Represents the state of the email store.
 */
export interface EmailStoreState {
  /**
   * The currently active email ID
   */
  activeID: string | null

  /**
   * A cache of emails.
   */
  cache: Record<string, {
    ids: string[]
    pagination: Pagination
    retrievalTimestamp: number
  }>

  /**
   * The list of emails.
   */
  list: Email[]

  /**
   * The retrieval timestamp
   */
  retrievalTimestamp: number

  /**
   * A key that is updated to force the update of the entity.
   */
  updateKey: number

  /**
   * A timeout before emitting a store update event.
   */
  storeUpdateTimeout: window.Timeout | null
}

/**
 * Represents an EmailStore that extends the Store interface.
 */
export interface EmailStore extends EmailStoreState, Store {
  /**
   * Fire a form update event for the Email.
   */
  emitFormUpdateEvent: (id: string) => void

  /**
   * Fire a store update event for all Email.
   */
  emitStoreUpdateEvent: () => void

  /**
   * The currently active email
   */
  active: Email

  /**
   * Adds an email to the local EmailStore.
   * @param email The email to be added.
   */
  add: (email: Email) => void

  /**
   * Checks whether the list contains an instance with the provided ID.
   * @param id The id to be searched.
   * @returns {boolean} A boolean indicating whether the list contains the ID.
   */
  contains: (id: string) => boolean

  /**
   * Deletes an email from the EmailStore from the external database.
   * @param email The email to be deleted.
   * @returns {Promise<void>} A promise that resolves when the email is deleted.
   */
  delete: (email: Email) => Promise<void>

  /**
   * Deletes an email by ID from the EmailStore from the external database.
   * @param id The ID to be deleted.
   * @returns {Promise<void>} A promise that resolves when the email is deleted.
   */
  deleteById: (id: string) => Promise<void>

  /**
   * Get a Email from the local EmailStore.
   * @returns { Email | null } The email.
   */
  get: (id: string) => Email | null

  /**
   * Reinserts an email to the EmailStore list.
   * @param email The email to be reinserted.
   * @returns {void}
   */
  reinsert: (email: Email) => void

  /**
   * Removes an email from the local EmailStore.
   * @param email The email to be removed.
   * @returns {void}
   */
  remove: (email: Email) => void

  /**
   * Determines whether a refresh of the store is required
   */
  refreshRequired: boolean

  /**
   * Retrieves a single Email from either the local EmailStore or external source, if forced or required.
    * @param id The ID of the Email to retrieve.
    * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves when the email is set as active.
   */
  retrieve: (id: string, force?: boolean) => Promise<Email>

  /**
   * Retrieves all emails from the EmailStore or external source, depending if a refresh is required.
   * @param force Indicates whether a refresh is forced.
   * @returns {Promise<void>} A promise that resolves with an array of emails.
   */
  retrieveAll: (force?: boolean) => Promise<{
    active: string | null
    items: Email[]
  }>

  /**
    * Retrieves emails paginated from the external source
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of emails.
    */
  retrievePaginated: (pagination?: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Email[]
  }>

  /**
    * Queries emails from the external source
    * @param queries The queries to be used for filtering.
    * @param pagination The pagination to be used for the query.
    * @param force Whether to force the query to the external source.
    * @returns {Promise<void>} A promise that resolves with an array of emails.
    */
  query: (queries: Query[], pagination: Pagination, force?: boolean) => Promise<{
    pagination: Pagination
    items: Email[]
  }>

  /**
   * Update an email from the EmailStore in the external database.
   * @param email The email to be updated.
   * @param connect Indicates whether the email should be connected to the user on update.
   * @returns {Promise<string>} A promise that resolves to the ID as a string when the email is updated.
   */
  update: (email: Email) => Promise<string>

  /**
    * Searches for emails in the external source.
    * @param query The query to be used for searching.
    * @returns {Promise<void>} A promise that resolves with an array of emails.
    */
  search: (query: string, pagination: Pagination, force?: boolean) => Promise<Email[]>
}
