import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IBatchExportDto,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class BatchExportDto extends Dto implements IBatchExportDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/batch_export/{id}'
  _reference = '/BatchExport/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    exportFromTimestamp = 0
    
    
    ids = [] as string[]
    
    
    _kind = "Export"
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): BatchExportDto {
    // Create a new instance of the class
    const obj = new BatchExportDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): BatchExportDto[] {
    return data.map((item) => BatchExportDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.exportFromTimestamp !== undefined && data.exportFromTimestamp !== null ) {
      this.exportFromTimestamp = data.exportFromTimestamp as number ?? this.exportFromTimestamp
      
    }
    if (data.ids !== undefined && data.ids !== null ) {
      this.ids = data.ids as string[] ?? this.ids
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
  }

}
