import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IAttributeOptionSetDto,  } from './dto.gen.d'
import { AttributeOption } from '../attribute_option'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class AttributeOptionSetDto extends Dto implements IAttributeOptionSetDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/attribute_option_set/{id}'
  _reference = '/AttributeOptionSet/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    label = ""
    
    
    options: AttributeOption[] = []
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): AttributeOptionSetDto {
    // Create a new instance of the class
    const obj = new AttributeOptionSetDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): AttributeOptionSetDto[] {
    return data.map((item) => AttributeOptionSetDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.label !== undefined && data.label !== null ) {
      this.label = data.label as string ?? this.label
      
    }
    if (data.options !== undefined && data.options !== null && Array.isArray(data.options)) {
      this.options = AttributeOption.FromJSONArray(data.options as JSONData[])
    }
  }

}
