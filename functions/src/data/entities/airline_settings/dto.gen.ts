import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IAirlineSettingsDto,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class AirlineSettingsDto extends Dto implements IAirlineSettingsDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/airline_settings/{id}'
  _reference = '/AirlineSettings/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    clicheCosts = 295.0
    
    
    _kind = "'AirlineSettings'"
    
    
    metersPerUnit = 1000
    
    
    rollLength = 1000
    
    
    rollWidthDividerMap = {} satisfies Record<number, number>
    
    
    rollWidthOptions = [] as number[]
    
    
    sleeveCosts = 650.0
    
    
    switchCosts = 200.0
    
    
    unitOptionSets = [] as number[][]
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): AirlineSettingsDto {
    // Create a new instance of the class
    const obj = new AirlineSettingsDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): AirlineSettingsDto[] {
    return data.map((item) => AirlineSettingsDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.clicheCosts !== undefined && data.clicheCosts !== null ) {
      this.clicheCosts = data.clicheCosts as number ?? this.clicheCosts
      
    }
    if (data._kind !== undefined && data._kind !== null ) {
      this._kind = data._kind as string ?? this._kind
      
    }
    if (data.metersPerUnit !== undefined && data.metersPerUnit !== null ) {
      this.metersPerUnit = data.metersPerUnit as number ?? this.metersPerUnit
      
    }
    if (data.rollLength !== undefined && data.rollLength !== null ) {
      this.rollLength = data.rollLength as number ?? this.rollLength
      
    }
    if (data.rollWidthDividerMap !== undefined && data.rollWidthDividerMap !== null ) {
      this.rollWidthDividerMap = data.rollWidthDividerMap as Record<number, number> ?? this.rollWidthDividerMap
      
    }
    if (data.rollWidthOptions !== undefined && data.rollWidthOptions !== null ) {
      this.rollWidthOptions = data.rollWidthOptions as number[] ?? this.rollWidthOptions
      
    }
    if (data.sleeveCosts !== undefined && data.sleeveCosts !== null ) {
      this.sleeveCosts = data.sleeveCosts as number ?? this.sleeveCosts
      
    }
    if (data.switchCosts !== undefined && data.switchCosts !== null ) {
      this.switchCosts = data.switchCosts as number ?? this.switchCosts
      
    }
    if (data.unitOptionSets !== undefined && data.unitOptionSets !== null ) {
      this.unitOptionSets = data.unitOptionSets as number[][] ?? this.unitOptionSets
      
    }
  }

}
