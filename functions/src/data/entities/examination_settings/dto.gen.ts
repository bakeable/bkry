import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IExaminationSettingsDto, IExclusionTimeFrame, ISelectionTimeFrame,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class ExaminationSettingsDto extends Dto implements IExaminationSettingsDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/examination_settings/{id}'
  _reference = '/ExaminationSettings/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    exclusionTime = 2592000000
    
    
    exclusionTimeFrame: IExclusionTimeFrame = {
      days: 0,
      hours: 0,
    }

    
    
    kind = "'ExaminationSettings'"
    
    
    maxOpenTasks = 20
    
    
    maxProducts = 10
    
    
    maxProperties = 5
    
    
    minProducts = 1
    
    
    minProperties = 1
    
    
    properties = [] as string[]
    
    
    selectionTime = 604800000
    
    
    selectionTimeFrame: ISelectionTimeFrame = {
      days: 0,
      hours: 0,
    }

    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): ExaminationSettingsDto {
    // Create a new instance of the class
    const obj = new ExaminationSettingsDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): ExaminationSettingsDto[] {
    return data.map((item) => ExaminationSettingsDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.exclusionTime !== undefined && data.exclusionTime !== null ) {
      this.exclusionTime = data.exclusionTime as number ?? this.exclusionTime
      
    }
    if (data.exclusionTimeFrame !== undefined && data.exclusionTimeFrame !== null ) {
      if (data.exclusionTimeFrame) {
        this.exclusionTimeFrame = ExclusionTimeFrame.FromJSON(data.exclusionTimeFrame)
      }
    }
    if (data.kind !== undefined && data.kind !== null ) {
      this.kind = data.kind as string ?? this.kind
      
    }
    if (data.maxOpenTasks !== undefined && data.maxOpenTasks !== null ) {
      this.maxOpenTasks = data.maxOpenTasks as number ?? this.maxOpenTasks
      
    }
    if (data.maxProducts !== undefined && data.maxProducts !== null ) {
      this.maxProducts = data.maxProducts as number ?? this.maxProducts
      
    }
    if (data.maxProperties !== undefined && data.maxProperties !== null ) {
      this.maxProperties = data.maxProperties as number ?? this.maxProperties
      
    }
    if (data.minProducts !== undefined && data.minProducts !== null ) {
      this.minProducts = data.minProducts as number ?? this.minProducts
      
    }
    if (data.minProperties !== undefined && data.minProperties !== null ) {
      this.minProperties = data.minProperties as number ?? this.minProperties
      
    }
    if (data.properties !== undefined && data.properties !== null ) {
      this.properties = data.properties as string[] ?? this.properties
      
    }
    if (data.selectionTime !== undefined && data.selectionTime !== null ) {
      this.selectionTime = data.selectionTime as number ?? this.selectionTime
      
    }
    if (data.selectionTimeFrame !== undefined && data.selectionTimeFrame !== null ) {
      if (data.selectionTimeFrame) {
        this.selectionTimeFrame = SelectionTimeFrame.FromJSON(data.selectionTimeFrame)
      }
    }
  }

}

export class ExclusionTimeFrame implements IExclusionTimeFrame {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      days = 0
    
    
      hours = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): ExclusionTimeFrame {
    // Create a new instance of the class
    const obj = new ExclusionTimeFrame()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): ExclusionTimeFrame[] {
    return data.map((item) => ExclusionTimeFrame.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.days !== undefined && data.days !== null ) {
      this.days = data.days as number ?? this.days
      
    }
    if (data.hours !== undefined && data.hours !== null ) {
      this.hours = data.hours as number ?? this.hours
      
    }
  }
}

export class SelectionTimeFrame implements ISelectionTimeFrame {
  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
      days = 0
    
    
      hours = 0
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): SelectionTimeFrame {
    // Create a new instance of the class
    const obj = new SelectionTimeFrame()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): SelectionTimeFrame[] {
    return data.map((item) => SelectionTimeFrame.FromJSON(item))
  }


  set(data: JSONData): void {
    // Implement variables here
    if (data.days !== undefined && data.days !== null ) {
      this.days = data.days as number ?? this.days
      
    }
    if (data.hours !== undefined && data.hours !== null ) {
      this.hours = data.hours as number ?? this.hours
      
    }
  }
}
