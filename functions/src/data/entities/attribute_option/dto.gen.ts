import { type JSONData } from '../../base_classes/dto.d'
import { Dto } from '../../base_classes/dto'
import type { IAttributeOptionDto,  } from './dto.gen.d'

/// ///////////////////////////////////////////////////////////////////////////////////////////////////
/// WARNING! THIS FILE IS AUTOMATICALLY GENERATED, ANY CHANGES WILL BE LOST ON NEXT GENERATION
/// ///////////////////////////////////////////////////////////////////////////////////////////////////


// Types

export class AttributeOptionDto extends Dto implements IAttributeOptionDto {
  /// ///////////////////////////////////////
  /// //////// PRIVATE VARIABLES ////////////
  /// ///////////////////////////////////////
  _path = '/attribute_option/{id}'
  _reference = '/AttributeOption/{id}'

  /// ///////////////////////////////////////
  /// ///////// PUBLIC VARIABLES ////////////
  /// ///////////////////////////////////////
    
    key = ""
    
    
    max = 0
    
    
    min = 0
    
    
    value = ""
    

  /// ///////////////////////////////////////
  /// ///////////// METHODS /////////////////
  /// ///////////////////////////////////////

  static FromJSON(data: unknown): AttributeOptionDto {
    // Create a new instance of the class
    const obj = new AttributeOptionDto()
    obj.set(data as JSONData)
    return obj
  }

  static FromJSONArray(data: unknown[]): AttributeOptionDto[] {
    return data.map((item) => AttributeOptionDto.FromJSON(item))
  }

  override set(data: JSONData): void {
    super.set(data)
 
    // Implement variables here
    if (data.key !== undefined && data.key !== null ) {
      this.key = data.key as string ?? this.key
      
    }
    if (data.max !== undefined && data.max !== null ) {
      this.max = data.max as number ?? this.max
      
    }
    if (data.min !== undefined && data.min !== null ) {
      this.min = data.min as number ?? this.min
      
    }
    if (data.value !== undefined && data.value !== null ) {
      this.value = data.value as string ?? this.value
      
    }
  }

}
